// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides access to TLS key and certificate data enrolled using Venafi. This can be used to define a
 * certificate.
 *
 * The `venafi.Certificate` resource handles certificate renewals as long as a
 * `pulumi up` is run within the `expirationWindow` period. Keep in mind that the
 * `expirationWindow` in the provider configuration needs to align with the renewal
 * window of the issuing CA to achieve the desired result.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as venafi from "@pulumi/venafi";
 *
 * const webserver = new venafi.Certificate("webserver", {
 *     algorithm: "RSA",
 *     commonName: "web.venafi.example",
 *     customFields: {
 *         "Cost Center": "AB1234",
 *         Environment: "UAT|Staging",
 *     },
 *     keyPassword: var_pk_pass,
 *     rsaBits: 2048,
 *     sanDns: [
 *         "web01.venafi.example",
 *         "web02.venafi.example",
 *     ],
 * });
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'venafi:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Key encryption algorithm, either `RSA` or `ECDSA`.
     * Defaults to `RSA`.
     */
    public readonly algorithm!: pulumi.Output<string | undefined>;
    /**
     * The X509 certificate in PEM format.
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    public readonly certificateDn!: pulumi.Output<string>;
    /**
     * The trust chain of X509 certificate authority certificates in PEM format
     * concatenated together.
     */
    public /*out*/ readonly chain!: pulumi.Output<string>;
    /**
     * The common name of the certificate.
     */
    public readonly commonName!: pulumi.Output<string>;
    public readonly csrPem!: pulumi.Output<string>;
    /**
     * Collection of Custom Field name-value pairs to
     * assign to the certificate.
     */
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ECDSA curve to use when generating a key
     */
    public readonly ecdsaCurve!: pulumi.Output<string | undefined>;
    /**
     * Number of hours before certificate expiry
     * to request a new certificate.
     */
    public readonly expirationWindow!: pulumi.Output<number | undefined>;
    /**
     * Used with validDays to indicate the target
     * issuer when using Trust Protection Platform.  Relevant values are: "DigiCert",
     * "Entrust", and "Microsoft".
     */
    public readonly issuerHint!: pulumi.Output<string | undefined>;
    /**
     * The password used to encrypt the private key.
     */
    public readonly keyPassword!: pulumi.Output<string | undefined>;
    /**
     * A base64-encoded PKCS#12 keystore secured by the `keyPassword`.
     */
    public readonly pkcs12!: pulumi.Output<string>;
    /**
     * The private key in PEM format.
     */
    public readonly privateKeyPem!: pulumi.Output<string>;
    /**
     * Number of bits to use when generating an RSA key.
     * Applies when `algorithm=RSA`.  Defaults to `2048`.
     */
    public readonly rsaBits!: pulumi.Output<number | undefined>;
    /**
     * List of DNS names to use as alternative
     * subjects of the certificate.
     */
    public readonly sanDns!: pulumi.Output<string[] | undefined>;
    /**
     * List of email addresses to use as
     * alternative subjects of the certificate.
     */
    public readonly sanEmails!: pulumi.Output<string[] | undefined>;
    /**
     * List of IP addresses to use as alternative
     * subjects of the certificate.
     */
    public readonly sanIps!: pulumi.Output<string[] | undefined>;
    /**
     * Desired number of days for which the new
     * certificate will be valid.
     */
    public readonly validDays!: pulumi.Output<number | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            inputs["algorithm"] = state ? state.algorithm : undefined;
            inputs["certificate"] = state ? state.certificate : undefined;
            inputs["certificateDn"] = state ? state.certificateDn : undefined;
            inputs["chain"] = state ? state.chain : undefined;
            inputs["commonName"] = state ? state.commonName : undefined;
            inputs["csrPem"] = state ? state.csrPem : undefined;
            inputs["customFields"] = state ? state.customFields : undefined;
            inputs["ecdsaCurve"] = state ? state.ecdsaCurve : undefined;
            inputs["expirationWindow"] = state ? state.expirationWindow : undefined;
            inputs["issuerHint"] = state ? state.issuerHint : undefined;
            inputs["keyPassword"] = state ? state.keyPassword : undefined;
            inputs["pkcs12"] = state ? state.pkcs12 : undefined;
            inputs["privateKeyPem"] = state ? state.privateKeyPem : undefined;
            inputs["rsaBits"] = state ? state.rsaBits : undefined;
            inputs["sanDns"] = state ? state.sanDns : undefined;
            inputs["sanEmails"] = state ? state.sanEmails : undefined;
            inputs["sanIps"] = state ? state.sanIps : undefined;
            inputs["validDays"] = state ? state.validDays : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            inputs["algorithm"] = args ? args.algorithm : undefined;
            inputs["certificateDn"] = args ? args.certificateDn : undefined;
            inputs["commonName"] = args ? args.commonName : undefined;
            inputs["csrPem"] = args ? args.csrPem : undefined;
            inputs["customFields"] = args ? args.customFields : undefined;
            inputs["ecdsaCurve"] = args ? args.ecdsaCurve : undefined;
            inputs["expirationWindow"] = args ? args.expirationWindow : undefined;
            inputs["issuerHint"] = args ? args.issuerHint : undefined;
            inputs["keyPassword"] = args ? args.keyPassword : undefined;
            inputs["pkcs12"] = args ? args.pkcs12 : undefined;
            inputs["privateKeyPem"] = args ? args.privateKeyPem : undefined;
            inputs["rsaBits"] = args ? args.rsaBits : undefined;
            inputs["sanDns"] = args ? args.sanDns : undefined;
            inputs["sanEmails"] = args ? args.sanEmails : undefined;
            inputs["sanIps"] = args ? args.sanIps : undefined;
            inputs["validDays"] = args ? args.validDays : undefined;
            inputs["certificate"] = undefined /*out*/;
            inputs["chain"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Certificate.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Key encryption algorithm, either `RSA` or `ECDSA`.
     * Defaults to `RSA`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The X509 certificate in PEM format.
     */
    certificate?: pulumi.Input<string>;
    certificateDn?: pulumi.Input<string>;
    /**
     * The trust chain of X509 certificate authority certificates in PEM format
     * concatenated together.
     */
    chain?: pulumi.Input<string>;
    /**
     * The common name of the certificate.
     */
    commonName?: pulumi.Input<string>;
    csrPem?: pulumi.Input<string>;
    /**
     * Collection of Custom Field name-value pairs to
     * assign to the certificate.
     */
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ECDSA curve to use when generating a key
     */
    ecdsaCurve?: pulumi.Input<string>;
    /**
     * Number of hours before certificate expiry
     * to request a new certificate.
     */
    expirationWindow?: pulumi.Input<number>;
    /**
     * Used with validDays to indicate the target
     * issuer when using Trust Protection Platform.  Relevant values are: "DigiCert",
     * "Entrust", and "Microsoft".
     */
    issuerHint?: pulumi.Input<string>;
    /**
     * The password used to encrypt the private key.
     */
    keyPassword?: pulumi.Input<string>;
    /**
     * A base64-encoded PKCS#12 keystore secured by the `keyPassword`.
     */
    pkcs12?: pulumi.Input<string>;
    /**
     * The private key in PEM format.
     */
    privateKeyPem?: pulumi.Input<string>;
    /**
     * Number of bits to use when generating an RSA key.
     * Applies when `algorithm=RSA`.  Defaults to `2048`.
     */
    rsaBits?: pulumi.Input<number>;
    /**
     * List of DNS names to use as alternative
     * subjects of the certificate.
     */
    sanDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of email addresses to use as
     * alternative subjects of the certificate.
     */
    sanEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IP addresses to use as alternative
     * subjects of the certificate.
     */
    sanIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Desired number of days for which the new
     * certificate will be valid.
     */
    validDays?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Key encryption algorithm, either `RSA` or `ECDSA`.
     * Defaults to `RSA`.
     */
    algorithm?: pulumi.Input<string>;
    certificateDn?: pulumi.Input<string>;
    /**
     * The common name of the certificate.
     */
    commonName: pulumi.Input<string>;
    csrPem?: pulumi.Input<string>;
    /**
     * Collection of Custom Field name-value pairs to
     * assign to the certificate.
     */
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ECDSA curve to use when generating a key
     */
    ecdsaCurve?: pulumi.Input<string>;
    /**
     * Number of hours before certificate expiry
     * to request a new certificate.
     */
    expirationWindow?: pulumi.Input<number>;
    /**
     * Used with validDays to indicate the target
     * issuer when using Trust Protection Platform.  Relevant values are: "DigiCert",
     * "Entrust", and "Microsoft".
     */
    issuerHint?: pulumi.Input<string>;
    /**
     * The password used to encrypt the private key.
     */
    keyPassword?: pulumi.Input<string>;
    /**
     * A base64-encoded PKCS#12 keystore secured by the `keyPassword`.
     */
    pkcs12?: pulumi.Input<string>;
    /**
     * The private key in PEM format.
     */
    privateKeyPem?: pulumi.Input<string>;
    /**
     * Number of bits to use when generating an RSA key.
     * Applies when `algorithm=RSA`.  Defaults to `2048`.
     */
    rsaBits?: pulumi.Input<number>;
    /**
     * List of DNS names to use as alternative
     * subjects of the certificate.
     */
    sanDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of email addresses to use as
     * alternative subjects of the certificate.
     */
    sanEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IP addresses to use as alternative
     * subjects of the certificate.
     */
    sanIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Desired number of days for which the new
     * certificate will be valid.
     */
    validDays?: pulumi.Input<number>;
}
