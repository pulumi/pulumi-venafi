// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'venafi:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
     */
    declare public readonly algorithm: pulumi.Output<string | undefined>;
    /**
     * The X509 certificate in PEM format.
     */
    declare public /*out*/ readonly certificate: pulumi.Output<string>;
    declare public readonly certificateDn: pulumi.Output<string>;
    /**
     * ID of the issued certificate
     */
    declare public /*out*/ readonly certificateId: pulumi.Output<string>;
    /**
     * The trust chain of X509 certificate authority certificates in PEM format concatenated together.
     */
    declare public /*out*/ readonly chain: pulumi.Output<string>;
    /**
     * The common name of the certificate.
     */
    declare public readonly commonName: pulumi.Output<string>;
    /**
     * Country of the certificate (C)
     */
    declare public readonly country: pulumi.Output<string | undefined>;
    /**
     * Whether key-pair generation will be `local` or `service` generated. Default is 
     * `local`.
     */
    declare public readonly csrOrigin: pulumi.Output<string | undefined>;
    declare public readonly csrPem: pulumi.Output<string>;
    /**
     * Collection of Custom Field name-value pairs to assign to the certificate.
     */
    declare public readonly customFields: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ECDSA curve to use when generating a key
     */
    declare public readonly ecdsaCurve: pulumi.Output<string | undefined>;
    /**
     * Number of hours before certificate expiry to request a new certificate. 
     * Defaults to `168`.
     */
    declare public readonly expirationWindow: pulumi.Output<number | undefined>;
    /**
     * Used with `validDays` to indicate the target issuer when using Trust Protection 
     * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
     */
    declare public readonly issuerHint: pulumi.Output<string | undefined>;
    /**
     * The password used to encrypt the private key.
     */
    declare public readonly keyPassword: pulumi.Output<string | undefined>;
    /**
     * Locality/City of the certificate (L)
     */
    declare public readonly locality: pulumi.Output<string | undefined>;
    /**
     * Use to specify a name for the new certificate object that will be created and placed 
     * in a policy. Only valid for Trust Protection Platform.
     */
    declare public readonly nickname: pulumi.Output<string | undefined>;
    /**
     * Organization of the certificate (O)
     */
    declare public readonly organization: pulumi.Output<string | undefined>;
    /**
     * List of Organizational Units of the certificate (OU)
     */
    declare public readonly organizationalUnits: pulumi.Output<string[] | undefined>;
    /**
     * A base64-encoded PKCS#12 keystore secured by the `keyPassword`. Useful when working with resources like 
     * azure key_vault_certificate.
     */
    declare public readonly pkcs12: pulumi.Output<string>;
    /**
     * The private key in PEM format.
     */
    declare public readonly privateKeyPem: pulumi.Output<string>;
    /**
     * Indicates the certificate should be reissued. This means the resource will destroyed and recreated
     */
    declare public readonly renewRequired: pulumi.Output<boolean | undefined>;
    /**
     * Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`. 
     * Defaults to `2048`.
     */
    declare public readonly rsaBits: pulumi.Output<number | undefined>;
    /**
     * List of DNS names to use as alternative subjects of the certificate.
     */
    declare public readonly sanDns: pulumi.Output<string[] | undefined>;
    /**
     * List of email addresses to use as alternative subjects of the certificate.
     */
    declare public readonly sanEmails: pulumi.Output<string[] | undefined>;
    /**
     * List of IP addresses to use as alternative subjects of the certificate.
     */
    declare public readonly sanIps: pulumi.Output<string[] | undefined>;
    /**
     * List of Uniform Resource Identifiers (URIs) to use as alternative subjects of 
     * the certificate.
     */
    declare public readonly sanUris: pulumi.Output<string[] | undefined>;
    /**
     * State of the certificate (S)
     */
    declare public readonly state: pulumi.Output<string | undefined>;
    /**
     * List of Certificate Tags defined in Venafi Control Plane.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Desired number of days for which the new certificate will be valid.
     */
    declare public readonly validDays: pulumi.Output<number | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["algorithm"] = state?.algorithm;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["certificateDn"] = state?.certificateDn;
            resourceInputs["certificateId"] = state?.certificateId;
            resourceInputs["chain"] = state?.chain;
            resourceInputs["commonName"] = state?.commonName;
            resourceInputs["country"] = state?.country;
            resourceInputs["csrOrigin"] = state?.csrOrigin;
            resourceInputs["csrPem"] = state?.csrPem;
            resourceInputs["customFields"] = state?.customFields;
            resourceInputs["ecdsaCurve"] = state?.ecdsaCurve;
            resourceInputs["expirationWindow"] = state?.expirationWindow;
            resourceInputs["issuerHint"] = state?.issuerHint;
            resourceInputs["keyPassword"] = state?.keyPassword;
            resourceInputs["locality"] = state?.locality;
            resourceInputs["nickname"] = state?.nickname;
            resourceInputs["organization"] = state?.organization;
            resourceInputs["organizationalUnits"] = state?.organizationalUnits;
            resourceInputs["pkcs12"] = state?.pkcs12;
            resourceInputs["privateKeyPem"] = state?.privateKeyPem;
            resourceInputs["renewRequired"] = state?.renewRequired;
            resourceInputs["rsaBits"] = state?.rsaBits;
            resourceInputs["sanDns"] = state?.sanDns;
            resourceInputs["sanEmails"] = state?.sanEmails;
            resourceInputs["sanIps"] = state?.sanIps;
            resourceInputs["sanUris"] = state?.sanUris;
            resourceInputs["state"] = state?.state;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["validDays"] = state?.validDays;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if (args?.commonName === undefined && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            resourceInputs["algorithm"] = args?.algorithm;
            resourceInputs["certificateDn"] = args?.certificateDn;
            resourceInputs["commonName"] = args?.commonName;
            resourceInputs["country"] = args?.country;
            resourceInputs["csrOrigin"] = args?.csrOrigin;
            resourceInputs["csrPem"] = args?.csrPem;
            resourceInputs["customFields"] = args?.customFields;
            resourceInputs["ecdsaCurve"] = args?.ecdsaCurve;
            resourceInputs["expirationWindow"] = args?.expirationWindow;
            resourceInputs["issuerHint"] = args?.issuerHint;
            resourceInputs["keyPassword"] = args?.keyPassword ? pulumi.secret(args.keyPassword) : undefined;
            resourceInputs["locality"] = args?.locality;
            resourceInputs["nickname"] = args?.nickname;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["organizationalUnits"] = args?.organizationalUnits;
            resourceInputs["pkcs12"] = args?.pkcs12;
            resourceInputs["privateKeyPem"] = args?.privateKeyPem ? pulumi.secret(args.privateKeyPem) : undefined;
            resourceInputs["renewRequired"] = args?.renewRequired;
            resourceInputs["rsaBits"] = args?.rsaBits;
            resourceInputs["sanDns"] = args?.sanDns;
            resourceInputs["sanEmails"] = args?.sanEmails;
            resourceInputs["sanIps"] = args?.sanIps;
            resourceInputs["sanUris"] = args?.sanUris;
            resourceInputs["state"] = args?.state;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["validDays"] = args?.validDays;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["certificateId"] = undefined /*out*/;
            resourceInputs["chain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keyPassword", "privateKeyPem"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The X509 certificate in PEM format.
     */
    certificate?: pulumi.Input<string>;
    certificateDn?: pulumi.Input<string>;
    /**
     * ID of the issued certificate
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The trust chain of X509 certificate authority certificates in PEM format concatenated together.
     */
    chain?: pulumi.Input<string>;
    /**
     * The common name of the certificate.
     */
    commonName?: pulumi.Input<string>;
    /**
     * Country of the certificate (C)
     */
    country?: pulumi.Input<string>;
    /**
     * Whether key-pair generation will be `local` or `service` generated. Default is 
     * `local`.
     */
    csrOrigin?: pulumi.Input<string>;
    csrPem?: pulumi.Input<string>;
    /**
     * Collection of Custom Field name-value pairs to assign to the certificate.
     */
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ECDSA curve to use when generating a key
     */
    ecdsaCurve?: pulumi.Input<string>;
    /**
     * Number of hours before certificate expiry to request a new certificate. 
     * Defaults to `168`.
     */
    expirationWindow?: pulumi.Input<number>;
    /**
     * Used with `validDays` to indicate the target issuer when using Trust Protection 
     * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
     */
    issuerHint?: pulumi.Input<string>;
    /**
     * The password used to encrypt the private key.
     */
    keyPassword?: pulumi.Input<string>;
    /**
     * Locality/City of the certificate (L)
     */
    locality?: pulumi.Input<string>;
    /**
     * Use to specify a name for the new certificate object that will be created and placed 
     * in a policy. Only valid for Trust Protection Platform.
     */
    nickname?: pulumi.Input<string>;
    /**
     * Organization of the certificate (O)
     */
    organization?: pulumi.Input<string>;
    /**
     * List of Organizational Units of the certificate (OU)
     */
    organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A base64-encoded PKCS#12 keystore secured by the `keyPassword`. Useful when working with resources like 
     * azure key_vault_certificate.
     */
    pkcs12?: pulumi.Input<string>;
    /**
     * The private key in PEM format.
     */
    privateKeyPem?: pulumi.Input<string>;
    /**
     * Indicates the certificate should be reissued. This means the resource will destroyed and recreated
     */
    renewRequired?: pulumi.Input<boolean>;
    /**
     * Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`. 
     * Defaults to `2048`.
     */
    rsaBits?: pulumi.Input<number>;
    /**
     * List of DNS names to use as alternative subjects of the certificate.
     */
    sanDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of email addresses to use as alternative subjects of the certificate.
     */
    sanEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IP addresses to use as alternative subjects of the certificate.
     */
    sanIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Uniform Resource Identifiers (URIs) to use as alternative subjects of 
     * the certificate.
     */
    sanUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * State of the certificate (S)
     */
    state?: pulumi.Input<string>;
    /**
     * List of Certificate Tags defined in Venafi Control Plane.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Desired number of days for which the new certificate will be valid.
     */
    validDays?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
     */
    algorithm?: pulumi.Input<string>;
    certificateDn?: pulumi.Input<string>;
    /**
     * The common name of the certificate.
     */
    commonName: pulumi.Input<string>;
    /**
     * Country of the certificate (C)
     */
    country?: pulumi.Input<string>;
    /**
     * Whether key-pair generation will be `local` or `service` generated. Default is 
     * `local`.
     */
    csrOrigin?: pulumi.Input<string>;
    csrPem?: pulumi.Input<string>;
    /**
     * Collection of Custom Field name-value pairs to assign to the certificate.
     */
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ECDSA curve to use when generating a key
     */
    ecdsaCurve?: pulumi.Input<string>;
    /**
     * Number of hours before certificate expiry to request a new certificate. 
     * Defaults to `168`.
     */
    expirationWindow?: pulumi.Input<number>;
    /**
     * Used with `validDays` to indicate the target issuer when using Trust Protection 
     * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
     */
    issuerHint?: pulumi.Input<string>;
    /**
     * The password used to encrypt the private key.
     */
    keyPassword?: pulumi.Input<string>;
    /**
     * Locality/City of the certificate (L)
     */
    locality?: pulumi.Input<string>;
    /**
     * Use to specify a name for the new certificate object that will be created and placed 
     * in a policy. Only valid for Trust Protection Platform.
     */
    nickname?: pulumi.Input<string>;
    /**
     * Organization of the certificate (O)
     */
    organization?: pulumi.Input<string>;
    /**
     * List of Organizational Units of the certificate (OU)
     */
    organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A base64-encoded PKCS#12 keystore secured by the `keyPassword`. Useful when working with resources like 
     * azure key_vault_certificate.
     */
    pkcs12?: pulumi.Input<string>;
    /**
     * The private key in PEM format.
     */
    privateKeyPem?: pulumi.Input<string>;
    /**
     * Indicates the certificate should be reissued. This means the resource will destroyed and recreated
     */
    renewRequired?: pulumi.Input<boolean>;
    /**
     * Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`. 
     * Defaults to `2048`.
     */
    rsaBits?: pulumi.Input<number>;
    /**
     * List of DNS names to use as alternative subjects of the certificate.
     */
    sanDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of email addresses to use as alternative subjects of the certificate.
     */
    sanEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IP addresses to use as alternative subjects of the certificate.
     */
    sanIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Uniform Resource Identifiers (URIs) to use as alternative subjects of 
     * the certificate.
     */
    sanUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * State of the certificate (S)
     */
    state?: pulumi.Input<string>;
    /**
     * List of Certificate Tags defined in Venafi Control Plane.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Desired number of days for which the new certificate will be valid.
     */
    validDays?: pulumi.Input<number>;
}
