// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CloudKeystoreInstallationArgs, CloudKeystoreInstallationState } from "./cloudKeystoreInstallation";
export type CloudKeystoreInstallation = import("./cloudKeystoreInstallation").CloudKeystoreInstallation;
export const CloudKeystoreInstallation: typeof import("./cloudKeystoreInstallation").CloudKeystoreInstallation = null as any;
utilities.lazyLoad(exports, ["CloudKeystoreInstallation"], () => require("./cloudKeystoreInstallation"));

export { GetCloudKeystoreArgs, GetCloudKeystoreResult, GetCloudKeystoreOutputArgs } from "./getCloudKeystore";
export const getCloudKeystore: typeof import("./getCloudKeystore").getCloudKeystore = null as any;
export const getCloudKeystoreOutput: typeof import("./getCloudKeystore").getCloudKeystoreOutput = null as any;
utilities.lazyLoad(exports, ["getCloudKeystore","getCloudKeystoreOutput"], () => require("./getCloudKeystore"));

export { GetCloudProviderArgs, GetCloudProviderResult, GetCloudProviderOutputArgs } from "./getCloudProvider";
export const getCloudProvider: typeof import("./getCloudProvider").getCloudProvider = null as any;
export const getCloudProviderOutput: typeof import("./getCloudProvider").getCloudProviderOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProvider","getCloudProviderOutput"], () => require("./getCloudProvider"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export * from "./provider";
import { Provider } from "./provider";

export { SshCertificateArgs, SshCertificateState } from "./sshCertificate";
export type SshCertificate = import("./sshCertificate").SshCertificate;
export const SshCertificate: typeof import("./sshCertificate").SshCertificate = null as any;
utilities.lazyLoad(exports, ["SshCertificate"], () => require("./sshCertificate"));

export { SshConfigArgs, SshConfigState } from "./sshConfig";
export type SshConfig = import("./sshConfig").SshConfig;
export const SshConfig: typeof import("./sshConfig").SshConfig = null as any;
utilities.lazyLoad(exports, ["SshConfig"], () => require("./sshConfig"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "venafi:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "venafi:index/cloudKeystoreInstallation:CloudKeystoreInstallation":
                return new CloudKeystoreInstallation(name, <any>undefined, { urn })
            case "venafi:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "venafi:index/sshCertificate:SshCertificate":
                return new SshCertificate(name, <any>undefined, { urn })
            case "venafi:index/sshConfig:SshConfig":
                return new SshConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("venafi", "index/certificate", _module)
pulumi.runtime.registerResourceModule("venafi", "index/cloudKeystoreInstallation", _module)
pulumi.runtime.registerResourceModule("venafi", "index/policy", _module)
pulumi.runtime.registerResourceModule("venafi", "index/sshCertificate", _module)
pulumi.runtime.registerResourceModule("venafi", "index/sshConfig", _module)
pulumi.runtime.registerResourcePackage("venafi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:venafi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
