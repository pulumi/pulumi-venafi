// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Venafi
{
    /// <summary>
    /// Provisions a certificate from Venafi Control Plane's inventory to any of the supported Cloud Providers: Amazon
    /// Certificate Manager, Azure KeyVault or Google Certificate Manager. Exports the ID of the provisioned certificate:
    /// certificate name for AKV and GCM or ARN for ACM.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Venafi = Pulumi.Venafi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Provision a certificate to cloud keystore with static values
    ///     var ckInstallationExampleById = new Venafi.CloudKeystoreInstallation("ck_installation_example_by_id", new()
    ///     {
    ///         CloudKeystoreId = "e48897d0-2762-11ef-198k-79ac590dd358",
    ///         CertificateId = "1877af16-2762-11ef-8fab-cc123456ff7",
    ///         CloudCertificateName = "com-terraform-example-com",
    ///     });
    /// 
    ///     // Provision a certificate to cloud keystore
    ///     var ckInstallationExample = new Venafi.CloudKeystoreInstallation("ck_installation_example", new()
    ///     {
    ///         CloudKeystoreId = ckExample.Id,
    ///         CertificateId = certificateExample.CertificateId,
    ///         CloudCertificateName = certificateExample.CommonName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import a Machine Identity from Venafi Control Plane using their ID. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import venafi:index/cloudKeystoreInstallation:CloudKeystoreInstallation example 2155bd32-2234-22ac-7cfd-ff1198845aa2
    /// ```
    /// </summary>
    [VenafiResourceType("venafi:index/cloudKeystoreInstallation:CloudKeystoreInstallation")]
    public partial class CloudKeystoreInstallation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
        /// </summary>
        [Output("arn")]
        public Output<string?> Arn { get; private set; } = null!;

        /// <summary>
        /// ID of the certificate to be provisioned to the given `keystore_id`.
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The ID of the provisioned certificate within the Cloud Keystore
        /// </summary>
        [Output("cloudCertificateId")]
        public Output<string> CloudCertificateId { get; private set; } = null!;

        /// <summary>
        /// Metadata of the provisioned certificate from the Cloud Keystore
        /// </summary>
        [Output("cloudCertificateMetadata")]
        public Output<ImmutableDictionary<string, string>> CloudCertificateMetadata { get; private set; } = null!;

        /// <summary>
        /// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificate_id`. Only valid for AKV and GCM keystores.
        /// </summary>
        [Output("cloudCertificateName")]
        public Output<string?> CloudCertificateName { get; private set; } = null!;

        /// <summary>
        /// ID of the cloud keystore where the certificate will be provisioned.
        /// </summary>
        [Output("cloudKeystoreId")]
        public Output<string> CloudKeystoreId { get; private set; } = null!;


        /// <summary>
        /// Create a CloudKeystoreInstallation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudKeystoreInstallation(string name, CloudKeystoreInstallationArgs args, CustomResourceOptions? options = null)
            : base("venafi:index/cloudKeystoreInstallation:CloudKeystoreInstallation", name, args ?? new CloudKeystoreInstallationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudKeystoreInstallation(string name, Input<string> id, CloudKeystoreInstallationState? state = null, CustomResourceOptions? options = null)
            : base("venafi:index/cloudKeystoreInstallation:CloudKeystoreInstallation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudKeystoreInstallation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudKeystoreInstallation Get(string name, Input<string> id, CloudKeystoreInstallationState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudKeystoreInstallation(name, id, state, options);
        }
    }

    public sealed class CloudKeystoreInstallationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// ID of the certificate to be provisioned to the given `keystore_id`.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        /// <summary>
        /// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificate_id`. Only valid for AKV and GCM keystores.
        /// </summary>
        [Input("cloudCertificateName")]
        public Input<string>? CloudCertificateName { get; set; }

        /// <summary>
        /// ID of the cloud keystore where the certificate will be provisioned.
        /// </summary>
        [Input("cloudKeystoreId", required: true)]
        public Input<string> CloudKeystoreId { get; set; } = null!;

        public CloudKeystoreInstallationArgs()
        {
        }
        public static new CloudKeystoreInstallationArgs Empty => new CloudKeystoreInstallationArgs();
    }

    public sealed class CloudKeystoreInstallationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// ID of the certificate to be provisioned to the given `keystore_id`.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The ID of the provisioned certificate within the Cloud Keystore
        /// </summary>
        [Input("cloudCertificateId")]
        public Input<string>? CloudCertificateId { get; set; }

        [Input("cloudCertificateMetadata")]
        private InputMap<string>? _cloudCertificateMetadata;

        /// <summary>
        /// Metadata of the provisioned certificate from the Cloud Keystore
        /// </summary>
        public InputMap<string> CloudCertificateMetadata
        {
            get => _cloudCertificateMetadata ?? (_cloudCertificateMetadata = new InputMap<string>());
            set => _cloudCertificateMetadata = value;
        }

        /// <summary>
        /// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificate_id`. Only valid for AKV and GCM keystores.
        /// </summary>
        [Input("cloudCertificateName")]
        public Input<string>? CloudCertificateName { get; set; }

        /// <summary>
        /// ID of the cloud keystore where the certificate will be provisioned.
        /// </summary>
        [Input("cloudKeystoreId")]
        public Input<string>? CloudKeystoreId { get; set; }

        public CloudKeystoreInstallationState()
        {
        }
        public static new CloudKeystoreInstallationState Empty => new CloudKeystoreInstallationState();
    }
}
