// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.venafi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    /**
     * Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    @Import(name="certificateDn")
    private @Nullable Output<String> certificateDn;

    public Optional<Output<String>> certificateDn() {
        return Optional.ofNullable(this.certificateDn);
    }

    /**
     * The common name of the certificate.
     * 
     */
    @Import(name="commonName", required=true)
    private Output<String> commonName;

    /**
     * @return The common name of the certificate.
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }

    /**
     * Whether key-pair generation will be `local` or `service` generated. Default is
     * `local`.
     * 
     */
    @Import(name="csrOrigin")
    private @Nullable Output<String> csrOrigin;

    /**
     * @return Whether key-pair generation will be `local` or `service` generated. Default is
     * `local`.
     * 
     */
    public Optional<Output<String>> csrOrigin() {
        return Optional.ofNullable(this.csrOrigin);
    }

    @Import(name="csrPem")
    private @Nullable Output<String> csrPem;

    public Optional<Output<String>> csrPem() {
        return Optional.ofNullable(this.csrPem);
    }

    /**
     * Collection of Custom Field name-value pairs to assign to the certificate.
     * 
     */
    @Import(name="customFields")
    private @Nullable Output<Map<String,String>> customFields;

    /**
     * @return Collection of Custom Field name-value pairs to assign to the certificate.
     * 
     */
    public Optional<Output<Map<String,String>>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * ECDSA curve to use when generating a key
     * 
     */
    @Import(name="ecdsaCurve")
    private @Nullable Output<String> ecdsaCurve;

    /**
     * @return ECDSA curve to use when generating a key
     * 
     */
    public Optional<Output<String>> ecdsaCurve() {
        return Optional.ofNullable(this.ecdsaCurve);
    }

    /**
     * Number of hours before certificate expiry to request a new certificate.
     * Defaults to `168`.
     * 
     */
    @Import(name="expirationWindow")
    private @Nullable Output<Integer> expirationWindow;

    /**
     * @return Number of hours before certificate expiry to request a new certificate.
     * Defaults to `168`.
     * 
     */
    public Optional<Output<Integer>> expirationWindow() {
        return Optional.ofNullable(this.expirationWindow);
    }

    /**
     * Used with `valid_days` to indicate the target issuer when using Trust Protection
     * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
     * 
     */
    @Import(name="issuerHint")
    private @Nullable Output<String> issuerHint;

    /**
     * @return Used with `valid_days` to indicate the target issuer when using Trust Protection
     * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
     * 
     */
    public Optional<Output<String>> issuerHint() {
        return Optional.ofNullable(this.issuerHint);
    }

    /**
     * The password used to encrypt the private key.
     * 
     */
    @Import(name="keyPassword")
    private @Nullable Output<String> keyPassword;

    /**
     * @return The password used to encrypt the private key.
     * 
     */
    public Optional<Output<String>> keyPassword() {
        return Optional.ofNullable(this.keyPassword);
    }

    /**
     * Use to specify a name for the new certificate object that will be created and placed
     * in a policy. Only valid for Trust Protection Platform.
     * 
     */
    @Import(name="nickname")
    private @Nullable Output<String> nickname;

    /**
     * @return Use to specify a name for the new certificate object that will be created and placed
     * in a policy. Only valid for Trust Protection Platform.
     * 
     */
    public Optional<Output<String>> nickname() {
        return Optional.ofNullable(this.nickname);
    }

    /**
     * A base64-encoded PKCS#12 keystore secured by the `key_password`. Useful when working with resources like
     * azure key_vault_certificate.
     * 
     */
    @Import(name="pkcs12")
    private @Nullable Output<String> pkcs12;

    /**
     * @return A base64-encoded PKCS#12 keystore secured by the `key_password`. Useful when working with resources like
     * azure key_vault_certificate.
     * 
     */
    public Optional<Output<String>> pkcs12() {
        return Optional.ofNullable(this.pkcs12);
    }

    /**
     * The private key in PEM format.
     * 
     */
    @Import(name="privateKeyPem")
    private @Nullable Output<String> privateKeyPem;

    /**
     * @return The private key in PEM format.
     * 
     */
    public Optional<Output<String>> privateKeyPem() {
        return Optional.ofNullable(this.privateKeyPem);
    }

    /**
     * Indicates the certificate should be reissued. This means the resource will destroyed and recreated
     * 
     */
    @Import(name="renewRequired")
    private @Nullable Output<Boolean> renewRequired;

    /**
     * @return Indicates the certificate should be reissued. This means the resource will destroyed and recreated
     * 
     */
    public Optional<Output<Boolean>> renewRequired() {
        return Optional.ofNullable(this.renewRequired);
    }

    /**
     * Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`.
     * Defaults to `2048`.
     * 
     */
    @Import(name="rsaBits")
    private @Nullable Output<Integer> rsaBits;

    /**
     * @return Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`.
     * Defaults to `2048`.
     * 
     */
    public Optional<Output<Integer>> rsaBits() {
        return Optional.ofNullable(this.rsaBits);
    }

    /**
     * List of DNS names to use as alternative subjects of the certificate.
     * 
     */
    @Import(name="sanDns")
    private @Nullable Output<List<String>> sanDns;

    /**
     * @return List of DNS names to use as alternative subjects of the certificate.
     * 
     */
    public Optional<Output<List<String>>> sanDns() {
        return Optional.ofNullable(this.sanDns);
    }

    /**
     * List of email addresses to use as alternative subjects of the certificate.
     * 
     */
    @Import(name="sanEmails")
    private @Nullable Output<List<String>> sanEmails;

    /**
     * @return List of email addresses to use as alternative subjects of the certificate.
     * 
     */
    public Optional<Output<List<String>>> sanEmails() {
        return Optional.ofNullable(this.sanEmails);
    }

    /**
     * List of IP addresses to use as alternative subjects of the certificate.
     * 
     */
    @Import(name="sanIps")
    private @Nullable Output<List<String>> sanIps;

    /**
     * @return List of IP addresses to use as alternative subjects of the certificate.
     * 
     */
    public Optional<Output<List<String>>> sanIps() {
        return Optional.ofNullable(this.sanIps);
    }

    /**
     * List of Uniform Resource Identifiers (URIs) to use as alternative subjects of
     * the certificate.
     * 
     */
    @Import(name="sanUris")
    private @Nullable Output<List<String>> sanUris;

    /**
     * @return List of Uniform Resource Identifiers (URIs) to use as alternative subjects of
     * the certificate.
     * 
     */
    public Optional<Output<List<String>>> sanUris() {
        return Optional.ofNullable(this.sanUris);
    }

    /**
     * Desired number of days for which the new certificate will be valid.
     * 
     */
    @Import(name="validDays")
    private @Nullable Output<Integer> validDays;

    /**
     * @return Desired number of days for which the new certificate will be valid.
     * 
     */
    public Optional<Output<Integer>> validDays() {
        return Optional.ofNullable(this.validDays);
    }

    private CertificateArgs() {}

    private CertificateArgs(CertificateArgs $) {
        this.algorithm = $.algorithm;
        this.certificateDn = $.certificateDn;
        this.commonName = $.commonName;
        this.csrOrigin = $.csrOrigin;
        this.csrPem = $.csrPem;
        this.customFields = $.customFields;
        this.ecdsaCurve = $.ecdsaCurve;
        this.expirationWindow = $.expirationWindow;
        this.issuerHint = $.issuerHint;
        this.keyPassword = $.keyPassword;
        this.nickname = $.nickname;
        this.pkcs12 = $.pkcs12;
        this.privateKeyPem = $.privateKeyPem;
        this.renewRequired = $.renewRequired;
        this.rsaBits = $.rsaBits;
        this.sanDns = $.sanDns;
        this.sanEmails = $.sanEmails;
        this.sanIps = $.sanIps;
        this.sanUris = $.sanUris;
        this.validDays = $.validDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateArgs $;

        public Builder() {
            $ = new CertificateArgs();
        }

        public Builder(CertificateArgs defaults) {
            $ = new CertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        public Builder certificateDn(@Nullable Output<String> certificateDn) {
            $.certificateDn = certificateDn;
            return this;
        }

        public Builder certificateDn(String certificateDn) {
            return certificateDn(Output.of(certificateDn));
        }

        /**
         * @param commonName The common name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder commonName(Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName The common name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param csrOrigin Whether key-pair generation will be `local` or `service` generated. Default is
         * `local`.
         * 
         * @return builder
         * 
         */
        public Builder csrOrigin(@Nullable Output<String> csrOrigin) {
            $.csrOrigin = csrOrigin;
            return this;
        }

        /**
         * @param csrOrigin Whether key-pair generation will be `local` or `service` generated. Default is
         * `local`.
         * 
         * @return builder
         * 
         */
        public Builder csrOrigin(String csrOrigin) {
            return csrOrigin(Output.of(csrOrigin));
        }

        public Builder csrPem(@Nullable Output<String> csrPem) {
            $.csrPem = csrPem;
            return this;
        }

        public Builder csrPem(String csrPem) {
            return csrPem(Output.of(csrPem));
        }

        /**
         * @param customFields Collection of Custom Field name-value pairs to assign to the certificate.
         * 
         * @return builder
         * 
         */
        public Builder customFields(@Nullable Output<Map<String,String>> customFields) {
            $.customFields = customFields;
            return this;
        }

        /**
         * @param customFields Collection of Custom Field name-value pairs to assign to the certificate.
         * 
         * @return builder
         * 
         */
        public Builder customFields(Map<String,String> customFields) {
            return customFields(Output.of(customFields));
        }

        /**
         * @param ecdsaCurve ECDSA curve to use when generating a key
         * 
         * @return builder
         * 
         */
        public Builder ecdsaCurve(@Nullable Output<String> ecdsaCurve) {
            $.ecdsaCurve = ecdsaCurve;
            return this;
        }

        /**
         * @param ecdsaCurve ECDSA curve to use when generating a key
         * 
         * @return builder
         * 
         */
        public Builder ecdsaCurve(String ecdsaCurve) {
            return ecdsaCurve(Output.of(ecdsaCurve));
        }

        /**
         * @param expirationWindow Number of hours before certificate expiry to request a new certificate.
         * Defaults to `168`.
         * 
         * @return builder
         * 
         */
        public Builder expirationWindow(@Nullable Output<Integer> expirationWindow) {
            $.expirationWindow = expirationWindow;
            return this;
        }

        /**
         * @param expirationWindow Number of hours before certificate expiry to request a new certificate.
         * Defaults to `168`.
         * 
         * @return builder
         * 
         */
        public Builder expirationWindow(Integer expirationWindow) {
            return expirationWindow(Output.of(expirationWindow));
        }

        /**
         * @param issuerHint Used with `valid_days` to indicate the target issuer when using Trust Protection
         * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
         * 
         * @return builder
         * 
         */
        public Builder issuerHint(@Nullable Output<String> issuerHint) {
            $.issuerHint = issuerHint;
            return this;
        }

        /**
         * @param issuerHint Used with `valid_days` to indicate the target issuer when using Trust Protection
         * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
         * 
         * @return builder
         * 
         */
        public Builder issuerHint(String issuerHint) {
            return issuerHint(Output.of(issuerHint));
        }

        /**
         * @param keyPassword The password used to encrypt the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyPassword(@Nullable Output<String> keyPassword) {
            $.keyPassword = keyPassword;
            return this;
        }

        /**
         * @param keyPassword The password used to encrypt the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyPassword(String keyPassword) {
            return keyPassword(Output.of(keyPassword));
        }

        /**
         * @param nickname Use to specify a name for the new certificate object that will be created and placed
         * in a policy. Only valid for Trust Protection Platform.
         * 
         * @return builder
         * 
         */
        public Builder nickname(@Nullable Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        /**
         * @param nickname Use to specify a name for the new certificate object that will be created and placed
         * in a policy. Only valid for Trust Protection Platform.
         * 
         * @return builder
         * 
         */
        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        /**
         * @param pkcs12 A base64-encoded PKCS#12 keystore secured by the `key_password`. Useful when working with resources like
         * azure key_vault_certificate.
         * 
         * @return builder
         * 
         */
        public Builder pkcs12(@Nullable Output<String> pkcs12) {
            $.pkcs12 = pkcs12;
            return this;
        }

        /**
         * @param pkcs12 A base64-encoded PKCS#12 keystore secured by the `key_password`. Useful when working with resources like
         * azure key_vault_certificate.
         * 
         * @return builder
         * 
         */
        public Builder pkcs12(String pkcs12) {
            return pkcs12(Output.of(pkcs12));
        }

        /**
         * @param privateKeyPem The private key in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPem(@Nullable Output<String> privateKeyPem) {
            $.privateKeyPem = privateKeyPem;
            return this;
        }

        /**
         * @param privateKeyPem The private key in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPem(String privateKeyPem) {
            return privateKeyPem(Output.of(privateKeyPem));
        }

        /**
         * @param renewRequired Indicates the certificate should be reissued. This means the resource will destroyed and recreated
         * 
         * @return builder
         * 
         */
        public Builder renewRequired(@Nullable Output<Boolean> renewRequired) {
            $.renewRequired = renewRequired;
            return this;
        }

        /**
         * @param renewRequired Indicates the certificate should be reissued. This means the resource will destroyed and recreated
         * 
         * @return builder
         * 
         */
        public Builder renewRequired(Boolean renewRequired) {
            return renewRequired(Output.of(renewRequired));
        }

        /**
         * @param rsaBits Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`.
         * Defaults to `2048`.
         * 
         * @return builder
         * 
         */
        public Builder rsaBits(@Nullable Output<Integer> rsaBits) {
            $.rsaBits = rsaBits;
            return this;
        }

        /**
         * @param rsaBits Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`.
         * Defaults to `2048`.
         * 
         * @return builder
         * 
         */
        public Builder rsaBits(Integer rsaBits) {
            return rsaBits(Output.of(rsaBits));
        }

        /**
         * @param sanDns List of DNS names to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanDns(@Nullable Output<List<String>> sanDns) {
            $.sanDns = sanDns;
            return this;
        }

        /**
         * @param sanDns List of DNS names to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanDns(List<String> sanDns) {
            return sanDns(Output.of(sanDns));
        }

        /**
         * @param sanDns List of DNS names to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanDns(String... sanDns) {
            return sanDns(List.of(sanDns));
        }

        /**
         * @param sanEmails List of email addresses to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanEmails(@Nullable Output<List<String>> sanEmails) {
            $.sanEmails = sanEmails;
            return this;
        }

        /**
         * @param sanEmails List of email addresses to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanEmails(List<String> sanEmails) {
            return sanEmails(Output.of(sanEmails));
        }

        /**
         * @param sanEmails List of email addresses to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanEmails(String... sanEmails) {
            return sanEmails(List.of(sanEmails));
        }

        /**
         * @param sanIps List of IP addresses to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanIps(@Nullable Output<List<String>> sanIps) {
            $.sanIps = sanIps;
            return this;
        }

        /**
         * @param sanIps List of IP addresses to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanIps(List<String> sanIps) {
            return sanIps(Output.of(sanIps));
        }

        /**
         * @param sanIps List of IP addresses to use as alternative subjects of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanIps(String... sanIps) {
            return sanIps(List.of(sanIps));
        }

        /**
         * @param sanUris List of Uniform Resource Identifiers (URIs) to use as alternative subjects of
         * the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanUris(@Nullable Output<List<String>> sanUris) {
            $.sanUris = sanUris;
            return this;
        }

        /**
         * @param sanUris List of Uniform Resource Identifiers (URIs) to use as alternative subjects of
         * the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanUris(List<String> sanUris) {
            return sanUris(Output.of(sanUris));
        }

        /**
         * @param sanUris List of Uniform Resource Identifiers (URIs) to use as alternative subjects of
         * the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sanUris(String... sanUris) {
            return sanUris(List.of(sanUris));
        }

        /**
         * @param validDays Desired number of days for which the new certificate will be valid.
         * 
         * @return builder
         * 
         */
        public Builder validDays(@Nullable Output<Integer> validDays) {
            $.validDays = validDays;
            return this;
        }

        /**
         * @param validDays Desired number of days for which the new certificate will be valid.
         * 
         * @return builder
         * 
         */
        public Builder validDays(Integer validDays) {
            return validDays(Output.of(validDays));
        }

        public CertificateArgs build() {
            if ($.commonName == null) {
                throw new MissingRequiredPropertyException("CertificateArgs", "commonName");
            }
            return $;
        }
    }

}
