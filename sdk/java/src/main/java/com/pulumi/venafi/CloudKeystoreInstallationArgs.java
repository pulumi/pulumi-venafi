// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.venafi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudKeystoreInstallationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudKeystoreInstallationArgs Empty = new CloudKeystoreInstallationArgs();

    /**
     * ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * ID of the certificate to be provisioned to the given `keystore_id`.
     * 
     */
    @Import(name="certificateId", required=true)
    private Output<String> certificateId;

    /**
     * @return ID of the certificate to be provisioned to the given `keystore_id`.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }

    /**
     * Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificate_id`. Only valid for AKV and GCM keystores.
     * 
     */
    @Import(name="cloudCertificateName")
    private @Nullable Output<String> cloudCertificateName;

    /**
     * @return Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificate_id`. Only valid for AKV and GCM keystores.
     * 
     */
    public Optional<Output<String>> cloudCertificateName() {
        return Optional.ofNullable(this.cloudCertificateName);
    }

    /**
     * ID of the cloud keystore where the certificate will be provisioned.
     * 
     */
    @Import(name="cloudKeystoreId", required=true)
    private Output<String> cloudKeystoreId;

    /**
     * @return ID of the cloud keystore where the certificate will be provisioned.
     * 
     */
    public Output<String> cloudKeystoreId() {
        return this.cloudKeystoreId;
    }

    /**
     * The GCM certificate scope of the certificate. Only valid for GCM keystores. Supported values from GCM API documentation: DEFAULT, EDGE_CACHE, ALL_REGIONS. Only it&#39;s taken into account if the `cloud_certificate_name` argument is provided.
     * 
     */
    @Import(name="gcmCertScope")
    private @Nullable Output<String> gcmCertScope;

    /**
     * @return The GCM certificate scope of the certificate. Only valid for GCM keystores. Supported values from GCM API documentation: DEFAULT, EDGE_CACHE, ALL_REGIONS. Only it&#39;s taken into account if the `cloud_certificate_name` argument is provided.
     * 
     */
    public Optional<Output<String>> gcmCertScope() {
        return Optional.ofNullable(this.gcmCertScope);
    }

    private CloudKeystoreInstallationArgs() {}

    private CloudKeystoreInstallationArgs(CloudKeystoreInstallationArgs $) {
        this.arn = $.arn;
        this.certificateId = $.certificateId;
        this.cloudCertificateName = $.cloudCertificateName;
        this.cloudKeystoreId = $.cloudKeystoreId;
        this.gcmCertScope = $.gcmCertScope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudKeystoreInstallationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudKeystoreInstallationArgs $;

        public Builder() {
            $ = new CloudKeystoreInstallationArgs();
        }

        public Builder(CloudKeystoreInstallationArgs defaults) {
            $ = new CloudKeystoreInstallationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param certificateId ID of the certificate to be provisioned to the given `keystore_id`.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId ID of the certificate to be provisioned to the given `keystore_id`.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param cloudCertificateName Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificate_id`. Only valid for AKV and GCM keystores.
         * 
         * @return builder
         * 
         */
        public Builder cloudCertificateName(@Nullable Output<String> cloudCertificateName) {
            $.cloudCertificateName = cloudCertificateName;
            return this;
        }

        /**
         * @param cloudCertificateName Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificate_id`. Only valid for AKV and GCM keystores.
         * 
         * @return builder
         * 
         */
        public Builder cloudCertificateName(String cloudCertificateName) {
            return cloudCertificateName(Output.of(cloudCertificateName));
        }

        /**
         * @param cloudKeystoreId ID of the cloud keystore where the certificate will be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder cloudKeystoreId(Output<String> cloudKeystoreId) {
            $.cloudKeystoreId = cloudKeystoreId;
            return this;
        }

        /**
         * @param cloudKeystoreId ID of the cloud keystore where the certificate will be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder cloudKeystoreId(String cloudKeystoreId) {
            return cloudKeystoreId(Output.of(cloudKeystoreId));
        }

        /**
         * @param gcmCertScope The GCM certificate scope of the certificate. Only valid for GCM keystores. Supported values from GCM API documentation: DEFAULT, EDGE_CACHE, ALL_REGIONS. Only it&#39;s taken into account if the `cloud_certificate_name` argument is provided.
         * 
         * @return builder
         * 
         */
        public Builder gcmCertScope(@Nullable Output<String> gcmCertScope) {
            $.gcmCertScope = gcmCertScope;
            return this;
        }

        /**
         * @param gcmCertScope The GCM certificate scope of the certificate. Only valid for GCM keystores. Supported values from GCM API documentation: DEFAULT, EDGE_CACHE, ALL_REGIONS. Only it&#39;s taken into account if the `cloud_certificate_name` argument is provided.
         * 
         * @return builder
         * 
         */
        public Builder gcmCertScope(String gcmCertScope) {
            return gcmCertScope(Output.of(gcmCertScope));
        }

        public CloudKeystoreInstallationArgs build() {
            if ($.certificateId == null) {
                throw new MissingRequiredPropertyException("CloudKeystoreInstallationArgs", "certificateId");
            }
            if ($.cloudKeystoreId == null) {
                throw new MissingRequiredPropertyException("CloudKeystoreInstallationArgs", "cloudKeystoreId");
            }
            return $;
        }
    }

}
