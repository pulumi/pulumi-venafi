// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.venafi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.venafi.CertificateArgs;
import com.pulumi.venafi.Utilities;
import com.pulumi.venafi.inputs.CertificateState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="venafi:index/certificate:Certificate")
public class Certificate extends com.pulumi.resources.CustomResource {
    /**
     * Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
     * 
     */
    @Export(name="algorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> algorithm;

    /**
     * @return Key encryption algorithm, either RSA or ECDSA. Defaults to `RSA`.
     * 
     */
    public Output<Optional<String>> algorithm() {
        return Codegen.optional(this.algorithm);
    }
    /**
     * The X509 certificate in PEM format.
     * 
     */
    @Export(name="certificate", refs={String.class}, tree="[0]")
    private Output<String> certificate;

    /**
     * @return The X509 certificate in PEM format.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }
    @Export(name="certificateDn", refs={String.class}, tree="[0]")
    private Output<String> certificateDn;

    public Output<String> certificateDn() {
        return this.certificateDn;
    }
    /**
     * ID of the issued certificate
     * 
     */
    @Export(name="certificateId", refs={String.class}, tree="[0]")
    private Output<String> certificateId;

    /**
     * @return ID of the issued certificate
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }
    /**
     * The trust chain of X509 certificate authority certificates in PEM format concatenated together.
     * 
     */
    @Export(name="chain", refs={String.class}, tree="[0]")
    private Output<String> chain;

    /**
     * @return The trust chain of X509 certificate authority certificates in PEM format concatenated together.
     * 
     */
    public Output<String> chain() {
        return this.chain;
    }
    /**
     * The common name of the certificate.
     * 
     */
    @Export(name="commonName", refs={String.class}, tree="[0]")
    private Output<String> commonName;

    /**
     * @return The common name of the certificate.
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }
    /**
     * Whether key-pair generation will be `local` or `service` generated. Default is
     * `local`.
     * 
     */
    @Export(name="csrOrigin", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> csrOrigin;

    /**
     * @return Whether key-pair generation will be `local` or `service` generated. Default is
     * `local`.
     * 
     */
    public Output<Optional<String>> csrOrigin() {
        return Codegen.optional(this.csrOrigin);
    }
    @Export(name="csrPem", refs={String.class}, tree="[0]")
    private Output<String> csrPem;

    public Output<String> csrPem() {
        return this.csrPem;
    }
    /**
     * Collection of Custom Field name-value pairs to assign to the certificate.
     * 
     */
    @Export(name="customFields", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> customFields;

    /**
     * @return Collection of Custom Field name-value pairs to assign to the certificate.
     * 
     */
    public Output<Optional<Map<String,String>>> customFields() {
        return Codegen.optional(this.customFields);
    }
    /**
     * ECDSA curve to use when generating a key
     * 
     */
    @Export(name="ecdsaCurve", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ecdsaCurve;

    /**
     * @return ECDSA curve to use when generating a key
     * 
     */
    public Output<Optional<String>> ecdsaCurve() {
        return Codegen.optional(this.ecdsaCurve);
    }
    /**
     * Number of hours before certificate expiry to request a new certificate.
     * Defaults to `168`.
     * 
     */
    @Export(name="expirationWindow", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> expirationWindow;

    /**
     * @return Number of hours before certificate expiry to request a new certificate.
     * Defaults to `168`.
     * 
     */
    public Output<Optional<Integer>> expirationWindow() {
        return Codegen.optional(this.expirationWindow);
    }
    /**
     * Used with `valid_days` to indicate the target issuer when using Trust Protection
     * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
     * 
     */
    @Export(name="issuerHint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> issuerHint;

    /**
     * @return Used with `valid_days` to indicate the target issuer when using Trust Protection
     * Platform. Relevant values are: `DigiCert`, `Entrust`, and `Microsoft`.
     * 
     */
    public Output<Optional<String>> issuerHint() {
        return Codegen.optional(this.issuerHint);
    }
    /**
     * The password used to encrypt the private key.
     * 
     */
    @Export(name="keyPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyPassword;

    /**
     * @return The password used to encrypt the private key.
     * 
     */
    public Output<Optional<String>> keyPassword() {
        return Codegen.optional(this.keyPassword);
    }
    /**
     * Use to specify a name for the new certificate object that will be created and placed
     * in a policy. Only valid for Trust Protection Platform.
     * 
     */
    @Export(name="nickname", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nickname;

    /**
     * @return Use to specify a name for the new certificate object that will be created and placed
     * in a policy. Only valid for Trust Protection Platform.
     * 
     */
    public Output<Optional<String>> nickname() {
        return Codegen.optional(this.nickname);
    }
    /**
     * A base64-encoded PKCS#12 keystore secured by the `key_password`. Useful when working with resources like
     * azure key_vault_certificate.
     * 
     */
    @Export(name="pkcs12", refs={String.class}, tree="[0]")
    private Output<String> pkcs12;

    /**
     * @return A base64-encoded PKCS#12 keystore secured by the `key_password`. Useful when working with resources like
     * azure key_vault_certificate.
     * 
     */
    public Output<String> pkcs12() {
        return this.pkcs12;
    }
    /**
     * The private key in PEM format.
     * 
     */
    @Export(name="privateKeyPem", refs={String.class}, tree="[0]")
    private Output<String> privateKeyPem;

    /**
     * @return The private key in PEM format.
     * 
     */
    public Output<String> privateKeyPem() {
        return this.privateKeyPem;
    }
    /**
     * Indicates the certificate should be reissued. This means the resource will destroyed and recreated
     * 
     */
    @Export(name="renewRequired", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> renewRequired;

    /**
     * @return Indicates the certificate should be reissued. This means the resource will destroyed and recreated
     * 
     */
    public Output<Optional<Boolean>> renewRequired() {
        return Codegen.optional(this.renewRequired);
    }
    /**
     * Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`.
     * Defaults to `2048`.
     * 
     */
    @Export(name="rsaBits", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> rsaBits;

    /**
     * @return Number of bits to use when generating an RSA key. Applies when algorithm is `RSA`.
     * Defaults to `2048`.
     * 
     */
    public Output<Optional<Integer>> rsaBits() {
        return Codegen.optional(this.rsaBits);
    }
    /**
     * List of DNS names to use as alternative subjects of the certificate.
     * 
     */
    @Export(name="sanDns", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sanDns;

    /**
     * @return List of DNS names to use as alternative subjects of the certificate.
     * 
     */
    public Output<Optional<List<String>>> sanDns() {
        return Codegen.optional(this.sanDns);
    }
    /**
     * List of email addresses to use as alternative subjects of the certificate.
     * 
     */
    @Export(name="sanEmails", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sanEmails;

    /**
     * @return List of email addresses to use as alternative subjects of the certificate.
     * 
     */
    public Output<Optional<List<String>>> sanEmails() {
        return Codegen.optional(this.sanEmails);
    }
    /**
     * List of IP addresses to use as alternative subjects of the certificate.
     * 
     */
    @Export(name="sanIps", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sanIps;

    /**
     * @return List of IP addresses to use as alternative subjects of the certificate.
     * 
     */
    public Output<Optional<List<String>>> sanIps() {
        return Codegen.optional(this.sanIps);
    }
    /**
     * List of Uniform Resource Identifiers (URIs) to use as alternative subjects of
     * the certificate.
     * 
     */
    @Export(name="sanUris", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sanUris;

    /**
     * @return List of Uniform Resource Identifiers (URIs) to use as alternative subjects of
     * the certificate.
     * 
     */
    public Output<Optional<List<String>>> sanUris() {
        return Codegen.optional(this.sanUris);
    }
    /**
     * Desired number of days for which the new certificate will be valid.
     * 
     */
    @Export(name="validDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> validDays;

    /**
     * @return Desired number of days for which the new certificate will be valid.
     * 
     */
    public Output<Optional<Integer>> validDays() {
        return Codegen.optional(this.validDays);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Certificate(java.lang.String name) {
        this(name, CertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Certificate(java.lang.String name, CertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Certificate(java.lang.String name, CertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("venafi:index/certificate:Certificate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Certificate(java.lang.String name, Output<java.lang.String> id, @Nullable CertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("venafi:index/certificate:Certificate", name, state, makeResourceOptions(options, id), false);
    }

    private static CertificateArgs makeArgs(CertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CertificateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "keyPassword",
                "privateKeyPem"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Certificate get(java.lang.String name, Output<java.lang.String> id, @Nullable CertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Certificate(name, id, state, options);
    }
}
