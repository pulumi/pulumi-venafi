// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.venafi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.venafi.SshCertificateArgs;
import com.pulumi.venafi.Utilities;
import com.pulumi.venafi.inputs.SshCertificateState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="venafi:index/sshCertificate:SshCertificate")
public class SshCertificate extends com.pulumi.resources.CustomResource {
    /**
     * The SSH Certificate
     * 
     */
    @Export(name="certificate", type=String.class, parameters={})
    private Output<String> certificate;

    /**
     * @return The SSH Certificate
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }
    /**
     * Certificate type, server or client
     * 
     */
    @Export(name="certificateType", type=String.class, parameters={})
    private Output<String> certificateType;

    /**
     * @return Certificate type, server or client
     * 
     */
    public Output<String> certificateType() {
        return this.certificateType;
    }
    /**
     * The address (FQDN/hostname/IP/CIDR) of the destination host where the certificate will be used to authenticate to
     * 
     */
    @Export(name="destinationAddresses", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> destinationAddresses;

    /**
     * @return The address (FQDN/hostname/IP/CIDR) of the destination host where the certificate will be used to authenticate to
     * 
     */
    public Output<Optional<List<String>>> destinationAddresses() {
        return Codegen.optional(this.destinationAddresses);
    }
    /**
     * The requested certificate extensions.
     * 
     */
    @Export(name="extensions", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> extensions;

    /**
     * @return The requested certificate extensions.
     * 
     */
    public Output<Optional<List<String>>> extensions() {
        return Codegen.optional(this.extensions);
    }
    /**
     * The DN of the policy folder where the certificate object will be created
     * 
     */
    @Export(name="folder", type=String.class, parameters={})
    private Output</* @Nullable */ String> folder;

    /**
     * @return The DN of the policy folder where the certificate object will be created
     * 
     */
    public Output<Optional<String>> folder() {
        return Codegen.optional(this.folder);
    }
    /**
     * The requested force command.
     * 
     */
    @Export(name="forceCommand", type=String.class, parameters={})
    private Output</* @Nullable */ String> forceCommand;

    /**
     * @return The requested force command.
     * 
     */
    public Output<Optional<String>> forceCommand() {
        return Codegen.optional(this.forceCommand);
    }
    /**
     * The identifier of the requested certificate
     * 
     */
    @Export(name="keyId", type=String.class, parameters={})
    private Output<String> keyId;

    /**
     * @return The identifier of the requested certificate
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }
    /**
     * Passphrase for encrypting the private key
     * 
     */
    @Export(name="keyPassphrase", type=String.class, parameters={})
    private Output</* @Nullable */ String> keyPassphrase;

    /**
     * @return Passphrase for encrypting the private key
     * 
     */
    public Output<Optional<String>> keyPassphrase() {
        return Codegen.optional(this.keyPassphrase);
    }
    /**
     * The key size bits, they will be used for creating keypair
     * 
     */
    @Export(name="keySize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> keySize;

    /**
     * @return The key size bits, they will be used for creating keypair
     * 
     */
    public Output<Optional<Integer>> keySize() {
        return Codegen.optional(this.keySize);
    }
    /**
     * The friendly name for the certificate object.
     * 
     */
    @Export(name="objectName", type=String.class, parameters={})
    private Output</* @Nullable */ String> objectName;

    /**
     * @return The friendly name for the certificate object.
     * 
     */
    public Output<Optional<String>> objectName() {
        return Codegen.optional(this.objectName);
    }
    /**
     * The requested principals.
     * 
     */
    @Export(name="principals", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> principals;

    /**
     * @return The requested principals.
     * 
     */
    public Output<Optional<List<String>>> principals() {
        return Codegen.optional(this.principals);
    }
    /**
     * Private key
     * 
     */
    @Export(name="privateKey", type=String.class, parameters={})
    private Output<String> privateKey;

    /**
     * @return Private key
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }
    /**
     * Public key that will be used to generate the certificate
     * 
     */
    @Export(name="publicKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> publicKey;

    /**
     * @return Public key that will be used to generate the certificate
     * 
     */
    public Output<Optional<String>> publicKey() {
        return Codegen.optional(this.publicKey);
    }
    /**
     * Public key fingerprint SHA256
     * 
     */
    @Export(name="publicKeyFingerprint", type=String.class, parameters={})
    private Output<String> publicKeyFingerprint;

    /**
     * @return Public key fingerprint SHA256
     * 
     */
    public Output<String> publicKeyFingerprint() {
        return this.publicKeyFingerprint;
    }
    /**
     * If the public key will be: file provided or local, service generated
     * 
     */
    @Export(name="publicKeyMethod", type=String.class, parameters={})
    private Output</* @Nullable */ String> publicKeyMethod;

    /**
     * @return If the public key will be: file provided or local, service generated
     * 
     */
    public Output<Optional<String>> publicKeyMethod() {
        return Codegen.optional(this.publicKeyMethod);
    }
    /**
     * Serial number
     * 
     */
    @Export(name="serial", type=String.class, parameters={})
    private Output<String> serial;

    /**
     * @return Serial number
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }
    /**
     * CA fingerprint SHA256
     * 
     */
    @Export(name="signingCa", type=String.class, parameters={})
    private Output<String> signingCa;

    /**
     * @return CA fingerprint SHA256
     * 
     */
    public Output<String> signingCa() {
        return this.signingCa;
    }
    /**
     * The requested source addresses as list of IP/CIDR
     * 
     */
    @Export(name="sourceAddresses", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> sourceAddresses;

    /**
     * @return The requested source addresses as list of IP/CIDR
     * 
     */
    public Output<Optional<List<String>>> sourceAddresses() {
        return Codegen.optional(this.sourceAddresses);
    }
    /**
     * The certificate issuing template
     * 
     */
    @Export(name="template", type=String.class, parameters={})
    private Output<String> template;

    /**
     * @return The certificate issuing template
     * 
     */
    public Output<String> template() {
        return this.template;
    }
    /**
     * Valid from
     * 
     */
    @Export(name="validFrom", type=String.class, parameters={})
    private Output<String> validFrom;

    /**
     * @return Valid from
     * 
     */
    public Output<String> validFrom() {
        return this.validFrom;
    }
    /**
     * How much time the requester wants to have the certificate valid, the format is hours
     * 
     */
    @Export(name="validHours", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> validHours;

    /**
     * @return How much time the requester wants to have the certificate valid, the format is hours
     * 
     */
    public Output<Optional<Integer>> validHours() {
        return Codegen.optional(this.validHours);
    }
    /**
     * Valid to
     * 
     */
    @Export(name="validTo", type=String.class, parameters={})
    private Output<String> validTo;

    /**
     * @return Valid to
     * 
     */
    public Output<String> validTo() {
        return this.validTo;
    }
    /**
     * If the line endings of service&#39;s private key will end on MS windows format
     * 
     */
    @Export(name="windows", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> windows;

    /**
     * @return If the line endings of service&#39;s private key will end on MS windows format
     * 
     */
    public Output<Optional<Boolean>> windows() {
        return Codegen.optional(this.windows);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SshCertificate(String name) {
        this(name, SshCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SshCertificate(String name, SshCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SshCertificate(String name, SshCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("venafi:index/sshCertificate:SshCertificate", name, args == null ? SshCertificateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SshCertificate(String name, Output<String> id, @Nullable SshCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("venafi:index/sshCertificate:SshCertificate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "keyPassphrase"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SshCertificate get(String name, Output<String> id, @Nullable SshCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SshCertificate(name, id, state, options);
    }
}
