// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package venafi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-venafi/sdk/go/venafi/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provisions a certificate from Venafi Control Plane's inventory to any of the supported Cloud Providers: Amazon
// Certificate Manager, Azure KeyVault or Google Certificate Manager. Exports the ID of the provisioned certificate:
// certificate name for AKV and GCM or ARN for ACM.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-venafi/sdk/go/venafi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Provision a certificate to cloud keystore with static values
//			_, err := venafi.NewCloudKeystoreInstallation(ctx, "ck_installation_example_by_id", &venafi.CloudKeystoreInstallationArgs{
//				CloudKeystoreId:      pulumi.String("e48897d0-2762-11ef-198k-79ac590dd358"),
//				CertificateId:        pulumi.String("1877af16-2762-11ef-8fab-cc123456ff7"),
//				CloudCertificateName: pulumi.String("com-terraform-example-com"),
//			})
//			if err != nil {
//				return err
//			}
//			// Provision a certificate to cloud keystore
//			_, err = venafi.NewCloudKeystoreInstallation(ctx, "ck_installation_example", &venafi.CloudKeystoreInstallationArgs{
//				CloudKeystoreId:      pulumi.Any(ckExample.Id),
//				CertificateId:        pulumi.Any(certificateExample.CertificateId),
//				CloudCertificateName: pulumi.Any(certificateExample.CommonName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import a Machine Identity from Venafi Control Plane using their ID. For example:
//
// console
//
// ```sh
// $ pulumi import venafi:index/cloudKeystoreInstallation:CloudKeystoreInstallation example 2155bd32-2234-22ac-7cfd-ff1198845aa2
// ```
type CloudKeystoreInstallation struct {
	pulumi.CustomResourceState

	// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
	Arn pulumi.StringPtrOutput `pulumi:"arn"`
	// ID of the certificate to be provisioned to the given `keystoreId`.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// ID of the certificate after it has been provisioned to the cloud keystore
	CloudCertificateId pulumi.StringOutput `pulumi:"cloudCertificateId"`
	// Metadata of the certificate after it has been provisioned to the cloud keystore
	CloudCertificateMetadata pulumi.StringMapOutput `pulumi:"cloudCertificateMetadata"`
	// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificateId`. Only valid for AKV and GCM keystores.
	CloudCertificateName pulumi.StringPtrOutput `pulumi:"cloudCertificateName"`
	// ID of the cloud keystore where the certificate will be provisioned.
	CloudKeystoreId pulumi.StringOutput `pulumi:"cloudKeystoreId"`
}

// NewCloudKeystoreInstallation registers a new resource with the given unique name, arguments, and options.
func NewCloudKeystoreInstallation(ctx *pulumi.Context,
	name string, args *CloudKeystoreInstallationArgs, opts ...pulumi.ResourceOption) (*CloudKeystoreInstallation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.CloudKeystoreId == nil {
		return nil, errors.New("invalid value for required argument 'CloudKeystoreId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudKeystoreInstallation
	err := ctx.RegisterResource("venafi:index/cloudKeystoreInstallation:CloudKeystoreInstallation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudKeystoreInstallation gets an existing CloudKeystoreInstallation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudKeystoreInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudKeystoreInstallationState, opts ...pulumi.ResourceOption) (*CloudKeystoreInstallation, error) {
	var resource CloudKeystoreInstallation
	err := ctx.ReadResource("venafi:index/cloudKeystoreInstallation:CloudKeystoreInstallation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudKeystoreInstallation resources.
type cloudKeystoreInstallationState struct {
	// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
	Arn *string `pulumi:"arn"`
	// ID of the certificate to be provisioned to the given `keystoreId`.
	CertificateId *string `pulumi:"certificateId"`
	// ID of the certificate after it has been provisioned to the cloud keystore
	CloudCertificateId *string `pulumi:"cloudCertificateId"`
	// Metadata of the certificate after it has been provisioned to the cloud keystore
	CloudCertificateMetadata map[string]string `pulumi:"cloudCertificateMetadata"`
	// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificateId`. Only valid for AKV and GCM keystores.
	CloudCertificateName *string `pulumi:"cloudCertificateName"`
	// ID of the cloud keystore where the certificate will be provisioned.
	CloudKeystoreId *string `pulumi:"cloudKeystoreId"`
}

type CloudKeystoreInstallationState struct {
	// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
	Arn pulumi.StringPtrInput
	// ID of the certificate to be provisioned to the given `keystoreId`.
	CertificateId pulumi.StringPtrInput
	// ID of the certificate after it has been provisioned to the cloud keystore
	CloudCertificateId pulumi.StringPtrInput
	// Metadata of the certificate after it has been provisioned to the cloud keystore
	CloudCertificateMetadata pulumi.StringMapInput
	// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificateId`. Only valid for AKV and GCM keystores.
	CloudCertificateName pulumi.StringPtrInput
	// ID of the cloud keystore where the certificate will be provisioned.
	CloudKeystoreId pulumi.StringPtrInput
}

func (CloudKeystoreInstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudKeystoreInstallationState)(nil)).Elem()
}

type cloudKeystoreInstallationArgs struct {
	// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
	Arn *string `pulumi:"arn"`
	// ID of the certificate to be provisioned to the given `keystoreId`.
	CertificateId string `pulumi:"certificateId"`
	// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificateId`. Only valid for AKV and GCM keystores.
	CloudCertificateName *string `pulumi:"cloudCertificateName"`
	// ID of the cloud keystore where the certificate will be provisioned.
	CloudKeystoreId string `pulumi:"cloudKeystoreId"`
}

// The set of arguments for constructing a CloudKeystoreInstallation resource.
type CloudKeystoreInstallationArgs struct {
	// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
	Arn pulumi.StringPtrInput
	// ID of the certificate to be provisioned to the given `keystoreId`.
	CertificateId pulumi.StringInput
	// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificateId`. Only valid for AKV and GCM keystores.
	CloudCertificateName pulumi.StringPtrInput
	// ID of the cloud keystore where the certificate will be provisioned.
	CloudKeystoreId pulumi.StringInput
}

func (CloudKeystoreInstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudKeystoreInstallationArgs)(nil)).Elem()
}

type CloudKeystoreInstallationInput interface {
	pulumi.Input

	ToCloudKeystoreInstallationOutput() CloudKeystoreInstallationOutput
	ToCloudKeystoreInstallationOutputWithContext(ctx context.Context) CloudKeystoreInstallationOutput
}

func (*CloudKeystoreInstallation) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudKeystoreInstallation)(nil)).Elem()
}

func (i *CloudKeystoreInstallation) ToCloudKeystoreInstallationOutput() CloudKeystoreInstallationOutput {
	return i.ToCloudKeystoreInstallationOutputWithContext(context.Background())
}

func (i *CloudKeystoreInstallation) ToCloudKeystoreInstallationOutputWithContext(ctx context.Context) CloudKeystoreInstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudKeystoreInstallationOutput)
}

// CloudKeystoreInstallationArrayInput is an input type that accepts CloudKeystoreInstallationArray and CloudKeystoreInstallationArrayOutput values.
// You can construct a concrete instance of `CloudKeystoreInstallationArrayInput` via:
//
//	CloudKeystoreInstallationArray{ CloudKeystoreInstallationArgs{...} }
type CloudKeystoreInstallationArrayInput interface {
	pulumi.Input

	ToCloudKeystoreInstallationArrayOutput() CloudKeystoreInstallationArrayOutput
	ToCloudKeystoreInstallationArrayOutputWithContext(context.Context) CloudKeystoreInstallationArrayOutput
}

type CloudKeystoreInstallationArray []CloudKeystoreInstallationInput

func (CloudKeystoreInstallationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudKeystoreInstallation)(nil)).Elem()
}

func (i CloudKeystoreInstallationArray) ToCloudKeystoreInstallationArrayOutput() CloudKeystoreInstallationArrayOutput {
	return i.ToCloudKeystoreInstallationArrayOutputWithContext(context.Background())
}

func (i CloudKeystoreInstallationArray) ToCloudKeystoreInstallationArrayOutputWithContext(ctx context.Context) CloudKeystoreInstallationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudKeystoreInstallationArrayOutput)
}

// CloudKeystoreInstallationMapInput is an input type that accepts CloudKeystoreInstallationMap and CloudKeystoreInstallationMapOutput values.
// You can construct a concrete instance of `CloudKeystoreInstallationMapInput` via:
//
//	CloudKeystoreInstallationMap{ "key": CloudKeystoreInstallationArgs{...} }
type CloudKeystoreInstallationMapInput interface {
	pulumi.Input

	ToCloudKeystoreInstallationMapOutput() CloudKeystoreInstallationMapOutput
	ToCloudKeystoreInstallationMapOutputWithContext(context.Context) CloudKeystoreInstallationMapOutput
}

type CloudKeystoreInstallationMap map[string]CloudKeystoreInstallationInput

func (CloudKeystoreInstallationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudKeystoreInstallation)(nil)).Elem()
}

func (i CloudKeystoreInstallationMap) ToCloudKeystoreInstallationMapOutput() CloudKeystoreInstallationMapOutput {
	return i.ToCloudKeystoreInstallationMapOutputWithContext(context.Background())
}

func (i CloudKeystoreInstallationMap) ToCloudKeystoreInstallationMapOutputWithContext(ctx context.Context) CloudKeystoreInstallationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudKeystoreInstallationMapOutput)
}

type CloudKeystoreInstallationOutput struct{ *pulumi.OutputState }

func (CloudKeystoreInstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudKeystoreInstallation)(nil)).Elem()
}

func (o CloudKeystoreInstallationOutput) ToCloudKeystoreInstallationOutput() CloudKeystoreInstallationOutput {
	return o
}

func (o CloudKeystoreInstallationOutput) ToCloudKeystoreInstallationOutputWithContext(ctx context.Context) CloudKeystoreInstallationOutput {
	return o
}

// ARN of the AWS certificate. Use it to provision the VCP certificate to an existing ACM certificate, instead of a new one. Only valid for ACM keystores.
func (o CloudKeystoreInstallationOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudKeystoreInstallation) pulumi.StringPtrOutput { return v.Arn }).(pulumi.StringPtrOutput)
}

// ID of the certificate to be provisioned to the given `keystoreId`.
func (o CloudKeystoreInstallationOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudKeystoreInstallation) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// ID of the certificate after it has been provisioned to the cloud keystore
func (o CloudKeystoreInstallationOutput) CloudCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudKeystoreInstallation) pulumi.StringOutput { return v.CloudCertificateId }).(pulumi.StringOutput)
}

// Metadata of the certificate after it has been provisioned to the cloud keystore
func (o CloudKeystoreInstallationOutput) CloudCertificateMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudKeystoreInstallation) pulumi.StringMapOutput { return v.CloudCertificateMetadata }).(pulumi.StringMapOutput)
}

// Name for the provisioned certificate in the keystore. If the name already exists, the provisioning will replace the previous certificate with the one from `certificateId`. Only valid for AKV and GCM keystores.
func (o CloudKeystoreInstallationOutput) CloudCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudKeystoreInstallation) pulumi.StringPtrOutput { return v.CloudCertificateName }).(pulumi.StringPtrOutput)
}

// ID of the cloud keystore where the certificate will be provisioned.
func (o CloudKeystoreInstallationOutput) CloudKeystoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudKeystoreInstallation) pulumi.StringOutput { return v.CloudKeystoreId }).(pulumi.StringOutput)
}

type CloudKeystoreInstallationArrayOutput struct{ *pulumi.OutputState }

func (CloudKeystoreInstallationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudKeystoreInstallation)(nil)).Elem()
}

func (o CloudKeystoreInstallationArrayOutput) ToCloudKeystoreInstallationArrayOutput() CloudKeystoreInstallationArrayOutput {
	return o
}

func (o CloudKeystoreInstallationArrayOutput) ToCloudKeystoreInstallationArrayOutputWithContext(ctx context.Context) CloudKeystoreInstallationArrayOutput {
	return o
}

func (o CloudKeystoreInstallationArrayOutput) Index(i pulumi.IntInput) CloudKeystoreInstallationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudKeystoreInstallation {
		return vs[0].([]*CloudKeystoreInstallation)[vs[1].(int)]
	}).(CloudKeystoreInstallationOutput)
}

type CloudKeystoreInstallationMapOutput struct{ *pulumi.OutputState }

func (CloudKeystoreInstallationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudKeystoreInstallation)(nil)).Elem()
}

func (o CloudKeystoreInstallationMapOutput) ToCloudKeystoreInstallationMapOutput() CloudKeystoreInstallationMapOutput {
	return o
}

func (o CloudKeystoreInstallationMapOutput) ToCloudKeystoreInstallationMapOutputWithContext(ctx context.Context) CloudKeystoreInstallationMapOutput {
	return o
}

func (o CloudKeystoreInstallationMapOutput) MapIndex(k pulumi.StringInput) CloudKeystoreInstallationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudKeystoreInstallation {
		return vs[0].(map[string]*CloudKeystoreInstallation)[vs[1].(string)]
	}).(CloudKeystoreInstallationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudKeystoreInstallationInput)(nil)).Elem(), &CloudKeystoreInstallation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudKeystoreInstallationArrayInput)(nil)).Elem(), CloudKeystoreInstallationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudKeystoreInstallationMapInput)(nil)).Elem(), CloudKeystoreInstallationMap{})
	pulumi.RegisterOutputType(CloudKeystoreInstallationOutput{})
	pulumi.RegisterOutputType(CloudKeystoreInstallationArrayOutput{})
	pulumi.RegisterOutputType(CloudKeystoreInstallationMapOutput{})
}
