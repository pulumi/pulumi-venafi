// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package venafi

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SshConfig struct {
	pulumi.CustomResourceState

	// The template's CA PublicKey
	CaPublicKey pulumi.StringOutput `pulumi:"caPublicKey"`
	// The requested principals.
	Principals pulumi.StringArrayOutput `pulumi:"principals"`
	// The certificate issuing template
	Template pulumi.StringOutput `pulumi:"template"`
}

// NewSshConfig registers a new resource with the given unique name, arguments, and options.
func NewSshConfig(ctx *pulumi.Context,
	name string, args *SshConfigArgs, opts ...pulumi.ResourceOption) (*SshConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	var resource SshConfig
	err := ctx.RegisterResource("venafi:index/sshConfig:SshConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshConfig gets an existing SshConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshConfigState, opts ...pulumi.ResourceOption) (*SshConfig, error) {
	var resource SshConfig
	err := ctx.ReadResource("venafi:index/sshConfig:SshConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SshConfig resources.
type sshConfigState struct {
	// The template's CA PublicKey
	CaPublicKey *string `pulumi:"caPublicKey"`
	// The requested principals.
	Principals []string `pulumi:"principals"`
	// The certificate issuing template
	Template *string `pulumi:"template"`
}

type SshConfigState struct {
	// The template's CA PublicKey
	CaPublicKey pulumi.StringPtrInput
	// The requested principals.
	Principals pulumi.StringArrayInput
	// The certificate issuing template
	Template pulumi.StringPtrInput
}

func (SshConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshConfigState)(nil)).Elem()
}

type sshConfigArgs struct {
	// The certificate issuing template
	Template string `pulumi:"template"`
}

// The set of arguments for constructing a SshConfig resource.
type SshConfigArgs struct {
	// The certificate issuing template
	Template pulumi.StringInput
}

func (SshConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshConfigArgs)(nil)).Elem()
}

type SshConfigInput interface {
	pulumi.Input

	ToSshConfigOutput() SshConfigOutput
	ToSshConfigOutputWithContext(ctx context.Context) SshConfigOutput
}

func (*SshConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfig)(nil)).Elem()
}

func (i *SshConfig) ToSshConfigOutput() SshConfigOutput {
	return i.ToSshConfigOutputWithContext(context.Background())
}

func (i *SshConfig) ToSshConfigOutputWithContext(ctx context.Context) SshConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigOutput)
}

// SshConfigArrayInput is an input type that accepts SshConfigArray and SshConfigArrayOutput values.
// You can construct a concrete instance of `SshConfigArrayInput` via:
//
//	SshConfigArray{ SshConfigArgs{...} }
type SshConfigArrayInput interface {
	pulumi.Input

	ToSshConfigArrayOutput() SshConfigArrayOutput
	ToSshConfigArrayOutputWithContext(context.Context) SshConfigArrayOutput
}

type SshConfigArray []SshConfigInput

func (SshConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshConfig)(nil)).Elem()
}

func (i SshConfigArray) ToSshConfigArrayOutput() SshConfigArrayOutput {
	return i.ToSshConfigArrayOutputWithContext(context.Background())
}

func (i SshConfigArray) ToSshConfigArrayOutputWithContext(ctx context.Context) SshConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigArrayOutput)
}

// SshConfigMapInput is an input type that accepts SshConfigMap and SshConfigMapOutput values.
// You can construct a concrete instance of `SshConfigMapInput` via:
//
//	SshConfigMap{ "key": SshConfigArgs{...} }
type SshConfigMapInput interface {
	pulumi.Input

	ToSshConfigMapOutput() SshConfigMapOutput
	ToSshConfigMapOutputWithContext(context.Context) SshConfigMapOutput
}

type SshConfigMap map[string]SshConfigInput

func (SshConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshConfig)(nil)).Elem()
}

func (i SshConfigMap) ToSshConfigMapOutput() SshConfigMapOutput {
	return i.ToSshConfigMapOutputWithContext(context.Background())
}

func (i SshConfigMap) ToSshConfigMapOutputWithContext(ctx context.Context) SshConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigMapOutput)
}

type SshConfigOutput struct{ *pulumi.OutputState }

func (SshConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfig)(nil)).Elem()
}

func (o SshConfigOutput) ToSshConfigOutput() SshConfigOutput {
	return o
}

func (o SshConfigOutput) ToSshConfigOutputWithContext(ctx context.Context) SshConfigOutput {
	return o
}

// The template's CA PublicKey
func (o SshConfigOutput) CaPublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SshConfig) pulumi.StringOutput { return v.CaPublicKey }).(pulumi.StringOutput)
}

// The requested principals.
func (o SshConfigOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SshConfig) pulumi.StringArrayOutput { return v.Principals }).(pulumi.StringArrayOutput)
}

// The certificate issuing template
func (o SshConfigOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v *SshConfig) pulumi.StringOutput { return v.Template }).(pulumi.StringOutput)
}

type SshConfigArrayOutput struct{ *pulumi.OutputState }

func (SshConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshConfig)(nil)).Elem()
}

func (o SshConfigArrayOutput) ToSshConfigArrayOutput() SshConfigArrayOutput {
	return o
}

func (o SshConfigArrayOutput) ToSshConfigArrayOutputWithContext(ctx context.Context) SshConfigArrayOutput {
	return o
}

func (o SshConfigArrayOutput) Index(i pulumi.IntInput) SshConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SshConfig {
		return vs[0].([]*SshConfig)[vs[1].(int)]
	}).(SshConfigOutput)
}

type SshConfigMapOutput struct{ *pulumi.OutputState }

func (SshConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshConfig)(nil)).Elem()
}

func (o SshConfigMapOutput) ToSshConfigMapOutput() SshConfigMapOutput {
	return o
}

func (o SshConfigMapOutput) ToSshConfigMapOutputWithContext(ctx context.Context) SshConfigMapOutput {
	return o
}

func (o SshConfigMapOutput) MapIndex(k pulumi.StringInput) SshConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SshConfig {
		return vs[0].(map[string]*SshConfig)[vs[1].(string)]
	}).(SshConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SshConfigInput)(nil)).Elem(), &SshConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshConfigArrayInput)(nil)).Elem(), SshConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshConfigMapInput)(nil)).Elem(), SshConfigMap{})
	pulumi.RegisterOutputType(SshConfigOutput{})
	pulumi.RegisterOutputType(SshConfigArrayOutput{})
	pulumi.RegisterOutputType(SshConfigMapOutput{})
}
