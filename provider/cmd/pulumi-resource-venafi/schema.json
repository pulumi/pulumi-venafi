{
    "name": "venafi",
    "description": "A Pulumi package for creating and managing venafi cloud resources.",
    "keywords": [
        "pulumi",
        "venafi"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`venafi` Terraform Provider](https://github.com/Venafi/terraform-provider-venafi).",
    "repository": "https://github.com/pulumi/pulumi-venafi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-venafi/sdk/go/venafi"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing venafi cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Venafi/terraform-provider-venafi)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-venafi` repo](https://github.com/pulumi/pulumi-venafi/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-venafi` repo](https://github.com/Venafi/terraform-provider-venafi/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Venafi/terraform-provider-venafi)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-venafi` repo](https://github.com/pulumi/pulumi-venafi/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-venafi` repo](https://github.com/Venafi/terraform-provider-venafi/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "accessToken": {
                "type": "string",
                "description": "Access token for TPP, user should use this for authentication\n"
            },
            "apiKey": {
                "type": "string",
                "description": "API key for Venafi as a Service. Example: 142231b7-cvb0-412e-886b-6aeght0bc93d\n"
            },
            "devMode": {
                "type": "boolean",
                "description": "When set to true, the resulting certificate will be issued by an ephemeral, no trust CA rather than enrolling using\nVenafi as a Service or Trust Protection Platform. Useful for development and testing.\n"
            },
            "tppPassword": {
                "type": "string",
                "description": "Password for WebSDK user. Example: password\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "tppUsername": {
                "type": "string",
                "description": "WebSDK user for Venafi Platform. Example: admin\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "trustBundle": {
                "type": "string",
                "description": "Use to specify a PEM-formatted file that contains certificates to be trust anchors for all communications with the\nVenafi Web Service. Example: trust_bundle = \"${file(\"chain.pem\")}\"\n"
            },
            "url": {
                "type": "string",
                "description": "The Venafi Web Service URL.. Example: https://tpp.venafi.example/vedsdk\n"
            },
            "zone": {
                "type": "string",
                "description": "DN of the Venafi Platform policy folder or name of the Venafi as a Service application. Example for Platform:\ntestpolicy\\\\vault Example for Venafi as a Service: Default\n"
            }
        }
    },
    "provider": {
        "description": "The provider type for the venafi package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessToken": {
                "type": "string",
                "description": "Access token for TPP, user should use this for authentication\n"
            },
            "apiKey": {
                "type": "string",
                "description": "API key for Venafi as a Service. Example: 142231b7-cvb0-412e-886b-6aeght0bc93d\n"
            },
            "devMode": {
                "type": "boolean",
                "description": "When set to true, the resulting certificate will be issued by an ephemeral, no trust CA rather than enrolling using\nVenafi as a Service or Trust Protection Platform. Useful for development and testing.\n"
            },
            "tppPassword": {
                "type": "string",
                "description": "Password for WebSDK user. Example: password\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "tppUsername": {
                "type": "string",
                "description": "WebSDK user for Venafi Platform. Example: admin\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "trustBundle": {
                "type": "string",
                "description": "Use to specify a PEM-formatted file that contains certificates to be trust anchors for all communications with the\nVenafi Web Service. Example: trust_bundle = \"${file(\"chain.pem\")}\"\n"
            },
            "url": {
                "type": "string",
                "description": "The Venafi Web Service URL.. Example: https://tpp.venafi.example/vedsdk\n"
            },
            "zone": {
                "type": "string",
                "description": "DN of the Venafi Platform policy folder or name of the Venafi as a Service application. Example for Platform:\ntestpolicy\\\\vault Example for Venafi as a Service: Default\n"
            }
        },
        "inputProperties": {
            "accessToken": {
                "type": "string",
                "description": "Access token for TPP, user should use this for authentication\n"
            },
            "apiKey": {
                "type": "string",
                "description": "API key for Venafi as a Service. Example: 142231b7-cvb0-412e-886b-6aeght0bc93d\n"
            },
            "devMode": {
                "type": "boolean",
                "description": "When set to true, the resulting certificate will be issued by an ephemeral, no trust CA rather than enrolling using\nVenafi as a Service or Trust Protection Platform. Useful for development and testing.\n"
            },
            "tppPassword": {
                "type": "string",
                "description": "Password for WebSDK user. Example: password\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "tppUsername": {
                "type": "string",
                "description": "WebSDK user for Venafi Platform. Example: admin\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "trustBundle": {
                "type": "string",
                "description": "Use to specify a PEM-formatted file that contains certificates to be trust anchors for all communications with the\nVenafi Web Service. Example: trust_bundle = \"${file(\"chain.pem\")}\"\n"
            },
            "url": {
                "type": "string",
                "description": "The Venafi Web Service URL.. Example: https://tpp.venafi.example/vedsdk\n"
            },
            "zone": {
                "type": "string",
                "description": "DN of the Venafi Platform policy folder or name of the Venafi as a Service application. Example for Platform:\ntestpolicy\\\\vault Example for Venafi as a Service: Default\n"
            }
        }
    },
    "resources": {
        "venafi:index/certificate:Certificate": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as venafi from \"@pulumi/venafi\";\n\nconst webserver = new venafi.Certificate(\"webserver\", {\n    algorithm: \"RSA\",\n    commonName: \"web.venafi.example\",\n    customFields: {\n        \"Cost Center\": \"AB1234\",\n        Environment: \"UAT|Staging\",\n    },\n    keyPassword: var_pk_pass,\n    rsaBits: 2048,\n    sanDns: [\n        \"web01.venafi.example\",\n        \"web02.venafi.example\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_venafi as venafi\n\nwebserver = venafi.Certificate(\"webserver\",\n    algorithm=\"RSA\",\n    common_name=\"web.venafi.example\",\n    custom_fields={\n        \"Cost Center\": \"AB1234\",\n        \"Environment\": \"UAT|Staging\",\n    },\n    key_password=var[\"pk_pass\"],\n    rsa_bits=2048,\n    san_dns=[\n        \"web01.venafi.example\",\n        \"web02.venafi.example\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Venafi = Pulumi.Venafi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webserver = new Venafi.Certificate(\"webserver\", new()\n    {\n        Algorithm = \"RSA\",\n        CommonName = \"web.venafi.example\",\n        CustomFields = \n        {\n            { \"Cost Center\", \"AB1234\" },\n            { \"Environment\", \"UAT|Staging\" },\n        },\n        KeyPassword = @var.Pk_pass,\n        RsaBits = 2048,\n        SanDns = new[]\n        {\n            \"web01.venafi.example\",\n            \"web02.venafi.example\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-venafi/sdk/go/venafi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := venafi.NewCertificate(ctx, \"webserver\", \u0026venafi.CertificateArgs{\n\t\t\tAlgorithm:  pulumi.String(\"RSA\"),\n\t\t\tCommonName: pulumi.String(\"web.venafi.example\"),\n\t\t\tCustomFields: pulumi.StringMap{\n\t\t\t\t\"Cost Center\": pulumi.String(\"AB1234\"),\n\t\t\t\t\"Environment\": pulumi.String(\"UAT|Staging\"),\n\t\t\t},\n\t\t\tKeyPassword: pulumi.Any(_var.Pk_pass),\n\t\t\tRsaBits:     pulumi.Int(2048),\n\t\t\tSanDns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web01.venafi.example\"),\n\t\t\t\tpulumi.String(\"web02.venafi.example\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.venafi.Certificate;\nimport com.pulumi.venafi.CertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var webserver = new Certificate(\"webserver\", CertificateArgs.builder()        \n            .algorithm(\"RSA\")\n            .commonName(\"web.venafi.example\")\n            .customFields(Map.ofEntries(\n                Map.entry(\"Cost Center\", \"AB1234\"),\n                Map.entry(\"Environment\", \"UAT|Staging\")\n            ))\n            .keyPassword(var_.pk_pass())\n            .rsaBits(\"2048\")\n            .sanDns(            \n                \"web01.venafi.example\",\n                \"web02.venafi.example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  webserver:\n    type: venafi:Certificate\n    properties:\n      algorithm: RSA\n      commonName: web.venafi.example\n      customFields:\n        Cost Center: AB1234\n        Environment: UAT|Staging\n      keyPassword: ${var.pk_pass}\n      rsaBits: '2048'\n      sanDns:\n        - web01.venafi.example\n        - web02.venafi.example\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The X509 certificate in PEM format.\n",
                    "language": {
                        "csharp": {
                            "name": "CertificateDetails"
                        }
                    }
                },
                "certificateDn": {
                    "type": "string"
                },
                "chain": {
                    "type": "string",
                    "description": "The trust chain of X509 certificate authority certificates in PEM format\nconcatenated together.\n"
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name of the certificate.\n"
                },
                "csrOrigin": {
                    "type": "string",
                    "description": "Whether key-pair generation will be `local` or `service` generated. Default is `local`.\n"
                },
                "csrPem": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n"
                },
                "ecdsaCurve": {
                    "type": "string",
                    "description": "ECDSA curve to use when generating a key\n"
                },
                "expirationWindow": {
                    "type": "integer",
                    "description": "Number of hours before certificate expiry\nto request a new certificate.  Defaults to `168`.\n"
                },
                "issuerHint": {
                    "type": "string",
                    "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n"
                },
                "keyPassword": {
                    "type": "string",
                    "description": "The password used to encrypt the private key.\n",
                    "secret": true
                },
                "nickname": {
                    "type": "string",
                    "description": "Use to specify a name for the new certificate object that will be created and placed in a policy. Only valid for TPP\n"
                },
                "pkcs12": {
                    "type": "string",
                    "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The private key in PEM format.\n",
                    "secret": true
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n"
                },
                "sanDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n"
                },
                "sanEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses to use as\nalternative subjects of the certificate.\n"
                },
                "sanIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n"
                },
                "sanUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Uniform Resource Identifiers (URIs) to use as alternative\nsubjects of the certificate.\n"
                },
                "validDays": {
                    "type": "integer",
                    "description": "Desired number of days for which the new\ncertificate will be valid.\n"
                }
            },
            "required": [
                "certificate",
                "certificateDn",
                "chain",
                "commonName",
                "csrPem",
                "pkcs12",
                "privateKeyPem"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n",
                    "willReplaceOnChanges": true
                },
                "certificateDn": {
                    "type": "string"
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "csrOrigin": {
                    "type": "string",
                    "description": "Whether key-pair generation will be `local` or `service` generated. Default is `local`.\n",
                    "willReplaceOnChanges": true
                },
                "csrPem": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "ecdsaCurve": {
                    "type": "string",
                    "description": "ECDSA curve to use when generating a key\n",
                    "willReplaceOnChanges": true
                },
                "expirationWindow": {
                    "type": "integer",
                    "description": "Number of hours before certificate expiry\nto request a new certificate.  Defaults to `168`.\n"
                },
                "issuerHint": {
                    "type": "string",
                    "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n",
                    "willReplaceOnChanges": true
                },
                "keyPassword": {
                    "type": "string",
                    "description": "The password used to encrypt the private key.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "nickname": {
                    "type": "string",
                    "description": "Use to specify a name for the new certificate object that will be created and placed in a policy. Only valid for TPP\n",
                    "willReplaceOnChanges": true
                },
                "pkcs12": {
                    "type": "string",
                    "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The private key in PEM format.\n",
                    "secret": true
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n",
                    "willReplaceOnChanges": true
                },
                "sanDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "sanEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses to use as\nalternative subjects of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "sanIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "sanUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Uniform Resource Identifiers (URIs) to use as alternative\nsubjects of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "validDays": {
                    "type": "integer",
                    "description": "Desired number of days for which the new\ncertificate will be valid.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "commonName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n",
                        "willReplaceOnChanges": true
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The X509 certificate in PEM format.\n",
                        "language": {
                            "csharp": {
                                "name": "CertificateDetails"
                            }
                        }
                    },
                    "certificateDn": {
                        "type": "string"
                    },
                    "chain": {
                        "type": "string",
                        "description": "The trust chain of X509 certificate authority certificates in PEM format\nconcatenated together.\n"
                    },
                    "commonName": {
                        "type": "string",
                        "description": "The common name of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "csrOrigin": {
                        "type": "string",
                        "description": "Whether key-pair generation will be `local` or `service` generated. Default is `local`.\n",
                        "willReplaceOnChanges": true
                    },
                    "csrPem": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "ecdsaCurve": {
                        "type": "string",
                        "description": "ECDSA curve to use when generating a key\n",
                        "willReplaceOnChanges": true
                    },
                    "expirationWindow": {
                        "type": "integer",
                        "description": "Number of hours before certificate expiry\nto request a new certificate.  Defaults to `168`.\n"
                    },
                    "issuerHint": {
                        "type": "string",
                        "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n",
                        "willReplaceOnChanges": true
                    },
                    "keyPassword": {
                        "type": "string",
                        "description": "The password used to encrypt the private key.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "nickname": {
                        "type": "string",
                        "description": "Use to specify a name for the new certificate object that will be created and placed in a policy. Only valid for TPP\n",
                        "willReplaceOnChanges": true
                    },
                    "pkcs12": {
                        "type": "string",
                        "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\n"
                    },
                    "privateKeyPem": {
                        "type": "string",
                        "description": "The private key in PEM format.\n",
                        "secret": true
                    },
                    "rsaBits": {
                        "type": "integer",
                        "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sanDns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "sanEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses to use as\nalternative subjects of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "sanIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "sanUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Uniform Resource Identifiers (URIs) to use as alternative\nsubjects of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "validDays": {
                        "type": "integer",
                        "description": "Desired number of days for which the new\ncertificate will be valid.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "venafi:index/policy:Policy": {
            "properties": {
                "policySpecification": {
                    "type": "string",
                    "description": "policy specification\n"
                },
                "zone": {
                    "type": "string",
                    "description": "zone name\n"
                }
            },
            "inputProperties": {
                "policySpecification": {
                    "type": "string",
                    "description": "policy specification\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "zone name\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "policySpecification": {
                        "type": "string",
                        "description": "policy specification\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "zone name\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "venafi:index/sshCertificate:SshCertificate": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The SSH Certificate\n"
                },
                "certificateType": {
                    "type": "string",
                    "description": "Certificate type, server or client\n"
                },
                "destinationAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The address (FQDN/hostname/IP/CIDR) of the destination host where the certificate will be used to authenticate to\n"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The requested certificate extensions.\n"
                },
                "folder": {
                    "type": "string",
                    "description": "The DN of the policy folder where the certificate object will be created\n"
                },
                "forceCommand": {
                    "type": "string",
                    "description": "The requested force command.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "The identifier of the requested certificate\n"
                },
                "keyPassphrase": {
                    "type": "string",
                    "description": "Passphrase for encrypting the private key\n",
                    "secret": true
                },
                "keySize": {
                    "type": "integer",
                    "description": "The key size bits, they will be used for creating keypair\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "The friendly name for the certificate object.\n"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The requested principals.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private key\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "Public key that will be used to generate the certificate\n"
                },
                "publicKeyFingerprint": {
                    "type": "string",
                    "description": "Public key fingerprint SHA256\n"
                },
                "publicKeyMethod": {
                    "type": "string",
                    "description": "If the public key will be: file provided or local, service generated\n"
                },
                "serial": {
                    "type": "string",
                    "description": "Serial number\n"
                },
                "signingCa": {
                    "type": "string",
                    "description": "CA fingerprint SHA256\n"
                },
                "sourceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The requested source addresses as list of IP/CIDR\n"
                },
                "template": {
                    "type": "string",
                    "description": "The certificate issuing template\n"
                },
                "validFrom": {
                    "type": "string",
                    "description": "Valid from\n"
                },
                "validHours": {
                    "type": "integer",
                    "description": "How much time the requester wants to have the certificate valid, the format is hours\n"
                },
                "validTo": {
                    "type": "string",
                    "description": "Valid to\n"
                },
                "windows": {
                    "type": "boolean",
                    "description": "If the line endings of service's private key will end on MS windows format\n"
                }
            },
            "required": [
                "certificate",
                "certificateType",
                "keyId",
                "privateKey",
                "publicKeyFingerprint",
                "serial",
                "signingCa",
                "template",
                "validFrom",
                "validTo"
            ],
            "inputProperties": {
                "destinationAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The address (FQDN/hostname/IP/CIDR) of the destination host where the certificate will be used to authenticate to\n",
                    "willReplaceOnChanges": true
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The requested certificate extensions.\n",
                    "willReplaceOnChanges": true
                },
                "folder": {
                    "type": "string",
                    "description": "The DN of the policy folder where the certificate object will be created\n",
                    "willReplaceOnChanges": true
                },
                "forceCommand": {
                    "type": "string",
                    "description": "The requested force command.\n",
                    "willReplaceOnChanges": true
                },
                "keyId": {
                    "type": "string",
                    "description": "The identifier of the requested certificate\n",
                    "willReplaceOnChanges": true
                },
                "keyPassphrase": {
                    "type": "string",
                    "description": "Passphrase for encrypting the private key\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "keySize": {
                    "type": "integer",
                    "description": "The key size bits, they will be used for creating keypair\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "The friendly name for the certificate object.\n",
                    "willReplaceOnChanges": true
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The requested principals.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "Public key that will be used to generate the certificate\n",
                    "willReplaceOnChanges": true
                },
                "publicKeyMethod": {
                    "type": "string",
                    "description": "If the public key will be: file provided or local, service generated\n",
                    "willReplaceOnChanges": true
                },
                "sourceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The requested source addresses as list of IP/CIDR\n",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "type": "string",
                    "description": "The certificate issuing template\n",
                    "willReplaceOnChanges": true
                },
                "validHours": {
                    "type": "integer",
                    "description": "How much time the requester wants to have the certificate valid, the format is hours\n",
                    "willReplaceOnChanges": true
                },
                "windows": {
                    "type": "boolean",
                    "description": "If the line endings of service's private key will end on MS windows format\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "keyId",
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshCertificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "The SSH Certificate\n"
                    },
                    "certificateType": {
                        "type": "string",
                        "description": "Certificate type, server or client\n"
                    },
                    "destinationAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The address (FQDN/hostname/IP/CIDR) of the destination host where the certificate will be used to authenticate to\n",
                        "willReplaceOnChanges": true
                    },
                    "extensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The requested certificate extensions.\n",
                        "willReplaceOnChanges": true
                    },
                    "folder": {
                        "type": "string",
                        "description": "The DN of the policy folder where the certificate object will be created\n",
                        "willReplaceOnChanges": true
                    },
                    "forceCommand": {
                        "type": "string",
                        "description": "The requested force command.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The identifier of the requested certificate\n",
                        "willReplaceOnChanges": true
                    },
                    "keyPassphrase": {
                        "type": "string",
                        "description": "Passphrase for encrypting the private key\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "keySize": {
                        "type": "integer",
                        "description": "The key size bits, they will be used for creating keypair\n",
                        "willReplaceOnChanges": true
                    },
                    "objectName": {
                        "type": "string",
                        "description": "The friendly name for the certificate object.\n",
                        "willReplaceOnChanges": true
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The requested principals.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Private key\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "Public key that will be used to generate the certificate\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKeyFingerprint": {
                        "type": "string",
                        "description": "Public key fingerprint SHA256\n"
                    },
                    "publicKeyMethod": {
                        "type": "string",
                        "description": "If the public key will be: file provided or local, service generated\n",
                        "willReplaceOnChanges": true
                    },
                    "serial": {
                        "type": "string",
                        "description": "Serial number\n"
                    },
                    "signingCa": {
                        "type": "string",
                        "description": "CA fingerprint SHA256\n"
                    },
                    "sourceAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The requested source addresses as list of IP/CIDR\n",
                        "willReplaceOnChanges": true
                    },
                    "template": {
                        "type": "string",
                        "description": "The certificate issuing template\n",
                        "willReplaceOnChanges": true
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "Valid from\n"
                    },
                    "validHours": {
                        "type": "integer",
                        "description": "How much time the requester wants to have the certificate valid, the format is hours\n",
                        "willReplaceOnChanges": true
                    },
                    "validTo": {
                        "type": "string",
                        "description": "Valid to\n"
                    },
                    "windows": {
                        "type": "boolean",
                        "description": "If the line endings of service's private key will end on MS windows format\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "venafi:index/sshConfig:SshConfig": {
            "properties": {
                "caPublicKey": {
                    "type": "string",
                    "description": "The template's CA PublicKey\n"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The requested principals.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The certificate issuing template\n"
                }
            },
            "required": [
                "caPublicKey",
                "principals",
                "template"
            ],
            "inputProperties": {
                "template": {
                    "type": "string",
                    "description": "The certificate issuing template\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshConfig resources.\n",
                "properties": {
                    "caPublicKey": {
                        "type": "string",
                        "description": "The template's CA PublicKey\n"
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The requested principals.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The certificate issuing template\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    }
}