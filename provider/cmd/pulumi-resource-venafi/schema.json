{
    "name": "venafi",
    "description": "A Pulumi package for creating and managing venafi cloud resources.",
    "keywords": [
        "pulumi",
        "venafi"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`venafi` Terraform Provider](https://github.com/Venafi/terraform-provider-venafi).",
    "repository": "https://github.com/pulumi/pulumi-venafi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accessToken": {
                "type": "string",
                "description": "Access token for TPP, user should use this for authentication\n"
            },
            "apiKey": {
                "type": "string",
                "description": "API key for Venafi Cloud. Example: 142231b7-cvb0-412e-886b-6aeght0bc93d\n"
            },
            "devMode": {
                "type": "boolean",
                "description": "When set to true, the resulting certificate will be issued by an ephemeral, no trust CA rather than enrolling using\nVenafi Cloud or Platform. Useful for development and testing.\n"
            },
            "tppPassword": {
                "type": "string",
                "description": "Password for WebSDK user. Example: password\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "tppUsername": {
                "type": "string",
                "description": "WebSDK user for Venafi Platform. Example: admin\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "trustBundle": {
                "type": "string",
                "description": "Use to specify a PEM-formatted file that contains certificates to be trust anchors for all communications with the\nVenafi Web Service. Example: trust_bundle = \"${file(\"chain.pem\")}\"\n"
            },
            "url": {
                "type": "string",
                "description": "The Venafi Web Service URL.. Example: https://tpp.venafi.example/vedsdk\n"
            },
            "zone": {
                "type": "string",
                "description": "DN of the Venafi Platform policy folder or name of the Venafi Cloud zone. Example for Platform: testpolicy\\\\vault\nExample for Venafi Cloud: Default\n"
            }
        }
    },
    "provider": {
        "description": "The provider type for the venafi package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "accessToken": {
                "type": "string",
                "description": "Access token for TPP, user should use this for authentication\n"
            },
            "apiKey": {
                "type": "string",
                "description": "API key for Venafi Cloud. Example: 142231b7-cvb0-412e-886b-6aeght0bc93d\n"
            },
            "devMode": {
                "type": "boolean",
                "description": "When set to true, the resulting certificate will be issued by an ephemeral, no trust CA rather than enrolling using\nVenafi Cloud or Platform. Useful for development and testing.\n"
            },
            "tppPassword": {
                "type": "string",
                "description": "Password for WebSDK user. Example: password\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "tppUsername": {
                "type": "string",
                "description": "WebSDK user for Venafi Platform. Example: admin\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "trustBundle": {
                "type": "string",
                "description": "Use to specify a PEM-formatted file that contains certificates to be trust anchors for all communications with the\nVenafi Web Service. Example: trust_bundle = \"${file(\"chain.pem\")}\"\n"
            },
            "url": {
                "type": "string",
                "description": "The Venafi Web Service URL.. Example: https://tpp.venafi.example/vedsdk\n"
            },
            "zone": {
                "type": "string",
                "description": "DN of the Venafi Platform policy folder or name of the Venafi Cloud zone. Example for Platform: testpolicy\\\\vault\nExample for Venafi Cloud: Default\n"
            }
        }
    },
    "resources": {
        "venafi:index/certificate:Certificate": {
            "description": "Provides access to TLS key and certificate data enrolled using Venafi. This can be used to define a\ncertificate.\n\nThe `venafi.Certificate` resource handles certificate renewals as long as a\n`pulumi up` is run within the `expiration_window` period. Keep in mind that the\n`expiration_window` in the provider configuration needs to align with the renewal\nwindow of the issuing CA to achieve the desired result.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as venafi from \"@pulumi/venafi\";\n\nconst webserver = new venafi.Certificate(\"webserver\", {\n    algorithm: \"RSA\",\n    commonName: \"web.venafi.example\",\n    customFields: {\n        \"Cost Center\": \"AB1234\",\n        Environment: \"UAT|Staging\",\n    },\n    keyPassword: var_pk_pass,\n    rsaBits: 2048,\n    sanDns: [\n        \"web01.venafi.example\",\n        \"web02.venafi.example\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_venafi as venafi\n\nwebserver = venafi.Certificate(\"webserver\",\n    algorithm=\"RSA\",\n    common_name=\"web.venafi.example\",\n    custom_fields={\n        \"Cost Center\": \"AB1234\",\n        \"Environment\": \"UAT|Staging\",\n    },\n    key_password=var[\"pk_pass\"],\n    rsa_bits=2048,\n    san_dns=[\n        \"web01.venafi.example\",\n        \"web02.venafi.example\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Venafi = Pulumi.Venafi;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var webserver = new Venafi.Certificate(\"webserver\", new Venafi.CertificateArgs\n        {\n            Algorithm = \"RSA\",\n            CommonName = \"web.venafi.example\",\n            CustomFields = \n            {\n                { \"Cost Center\", \"AB1234\" },\n                { \"Environment\", \"UAT|Staging\" },\n            },\n            KeyPassword = @var.Pk_pass,\n            RsaBits = 2048,\n            SanDns = \n            {\n                \"web01.venafi.example\",\n                \"web02.venafi.example\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-venafi/sdk/go/venafi/\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := venafi.NewCertificate(ctx, \"webserver\", \u0026venafi.CertificateArgs{\n\t\t\tAlgorithm:  pulumi.String(\"RSA\"),\n\t\t\tCommonName: pulumi.String(\"web.venafi.example\"),\n\t\t\tCustomFields: pulumi.StringMap{\n\t\t\t\t\"Cost Center\": pulumi.String(\"AB1234\"),\n\t\t\t\t\"Environment\": pulumi.String(\"UAT|Staging\"),\n\t\t\t},\n\t\t\tKeyPassword: pulumi.Any(_var.Pk_pass),\n\t\t\tRsaBits:     pulumi.Int(2048),\n\t\t\tSanDns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web01.venafi.example\"),\n\t\t\t\tpulumi.String(\"web02.venafi.example\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The X509 certificate in PEM format.\n",
                    "language": {
                        "csharp": {
                            "name": "CertificateDetails"
                        }
                    }
                },
                "certificateDn": {
                    "type": "string"
                },
                "chain": {
                    "type": "string",
                    "description": "The trust chain of X509 certificate authority certificates in PEM format\nconcatenated together.\n"
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name of the certificate.\n"
                },
                "csrPem": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n"
                },
                "ecdsaCurve": {
                    "type": "string",
                    "description": "ECDSA curve to use when generating a key\n"
                },
                "expirationWindow": {
                    "type": "integer",
                    "description": "Number of hours before certificate expiry\nto request a new certificate.\n"
                },
                "issuerHint": {
                    "type": "string",
                    "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n"
                },
                "keyPassword": {
                    "type": "string",
                    "description": "The password used to encrypt the private key.\n"
                },
                "pkcs12": {
                    "type": "string",
                    "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The private key in PEM format.\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n"
                },
                "sanDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n"
                },
                "sanEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses to use as\nalternative subjects of the certificate.\n"
                },
                "sanIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n"
                },
                "validDays": {
                    "type": "integer",
                    "description": "Desired number of days for which the new\ncertificate will be valid.\n"
                }
            },
            "required": [
                "certificate",
                "certificateDn",
                "chain",
                "commonName",
                "csrPem",
                "pkcs12",
                "privateKeyPem"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n"
                },
                "certificateDn": {
                    "type": "string"
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name of the certificate.\n"
                },
                "csrPem": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n"
                },
                "ecdsaCurve": {
                    "type": "string",
                    "description": "ECDSA curve to use when generating a key\n"
                },
                "expirationWindow": {
                    "type": "integer",
                    "description": "Number of hours before certificate expiry\nto request a new certificate.\n"
                },
                "issuerHint": {
                    "type": "string",
                    "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n"
                },
                "keyPassword": {
                    "type": "string",
                    "description": "The password used to encrypt the private key.\n"
                },
                "pkcs12": {
                    "type": "string",
                    "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The private key in PEM format.\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n"
                },
                "sanDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n"
                },
                "sanEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses to use as\nalternative subjects of the certificate.\n"
                },
                "sanIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n"
                },
                "validDays": {
                    "type": "integer",
                    "description": "Desired number of days for which the new\ncertificate will be valid.\n"
                }
            },
            "requiredInputs": [
                "commonName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The X509 certificate in PEM format.\n",
                        "language": {
                            "csharp": {
                                "name": "CertificateDetails"
                            }
                        }
                    },
                    "certificateDn": {
                        "type": "string"
                    },
                    "chain": {
                        "type": "string",
                        "description": "The trust chain of X509 certificate authority certificates in PEM format\nconcatenated together.\n"
                    },
                    "commonName": {
                        "type": "string",
                        "description": "The common name of the certificate.\n"
                    },
                    "csrPem": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n"
                    },
                    "ecdsaCurve": {
                        "type": "string",
                        "description": "ECDSA curve to use when generating a key\n"
                    },
                    "expirationWindow": {
                        "type": "integer",
                        "description": "Number of hours before certificate expiry\nto request a new certificate.\n"
                    },
                    "issuerHint": {
                        "type": "string",
                        "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n"
                    },
                    "keyPassword": {
                        "type": "string",
                        "description": "The password used to encrypt the private key.\n"
                    },
                    "pkcs12": {
                        "type": "string",
                        "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\n"
                    },
                    "privateKeyPem": {
                        "type": "string",
                        "description": "The private key in PEM format.\n"
                    },
                    "rsaBits": {
                        "type": "integer",
                        "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n"
                    },
                    "sanDns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n"
                    },
                    "sanEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses to use as\nalternative subjects of the certificate.\n"
                    },
                    "sanIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n"
                    },
                    "validDays": {
                        "type": "integer",
                        "description": "Desired number of days for which the new\ncertificate will be valid.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-venafi/sdk/go/venafi"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.15.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing venafi cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Venafi/terraform-provider-venafi)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-venafi` repo](https://github.com/pulumi/pulumi-venafi/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`Venafi/terraform-provider-venafi` repo](https://github.com/Venafi/terraform-provider-venafi/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Venafi/terraform-provider-venafi)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-venafi` repo](https://github.com/pulumi/pulumi-venafi/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`Venafi/terraform-provider-venafi` repo](https://github.com/Venafi/terraform-provider-venafi/issues).",
            "requires": {
                "pulumi": "\u003e=2.15.0,\u003c3.0.0"
            }
        }
    }
}