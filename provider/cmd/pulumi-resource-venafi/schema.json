{
    "name": "venafi",
    "description": "A Pulumi package for creating and managing venafi cloud resources.",
    "keywords": [
        "pulumi",
        "venafi"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`venafi` Terraform Provider](https://github.com/Venafi/terraform-provider-venafi).",
    "repository": "https://github.com/pulumi/pulumi-venafi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-venafi/sdk/go/venafi",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing venafi cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Venafi/terraform-provider-venafi)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-venafi` repo](https://github.com/pulumi/pulumi-venafi/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-venafi` repo](https://github.com/Venafi/terraform-provider-venafi/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Venafi/terraform-provider-venafi)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-venafi` repo](https://github.com/pulumi/pulumi-venafi/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-venafi` repo](https://github.com/Venafi/terraform-provider-venafi/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accessToken": {
                "type": "string",
                "description": "Access token for Venafi TLSPDC, user should use this for authentication\n",
                "secret": true
            },
            "apiKey": {
                "type": "string",
                "description": "API key for Venafi as a Service. Example: 142231b7-cvb0-412e-886b-6aeght0bc93d\n",
                "secret": true
            },
            "clientId": {
                "type": "string",
                "description": "application that will be using the token\n"
            },
            "devMode": {
                "type": "boolean",
                "description": "When set to true, the resulting certificate will be issued by an ephemeral, no trust CA rather than enrolling using\nVenafi as a Service or Trust Protection Platform. Useful for development and testing.\n"
            },
            "p12CertFilename": {
                "type": "string",
                "description": "Filename of PKCS#12 keystore containing a client certificate, private key, and chain certificates to authenticate to\nTLSPDC\n"
            },
            "p12CertPassword": {
                "type": "string",
                "description": "Password for the PKCS#12 keystore declared in p12_cert\n",
                "secret": true
            },
            "skipRetirement": {
                "type": "boolean"
            },
            "tppPassword": {
                "type": "string",
                "description": "Password for WebSDK user. Example: password\n",
                "deprecationMessage": ", please use access_token instead",
                "secret": true
            },
            "tppUsername": {
                "type": "string",
                "description": "WebSDK user for Venafi TLSPDC. Example: admin\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "trustBundle": {
                "type": "string",
                "description": "Use to specify a PEM-formatted file that contains certificates to be trust anchors for all communications with the\nVenafi Web Service. Example: trust_bundle = \"${file(\"chain.pem\")}\"\n"
            },
            "url": {
                "type": "string",
                "description": "The Venafi Platform URL. Example: https://tpp.venafi.example/vedsdk\n"
            },
            "zone": {
                "type": "string",
                "description": "DN of the Venafi TLSPDC policy folder or name of the Venafi as a Service application plus issuing template alias.\nExample for Platform: testPolicy\\\\vault Example for Venafi as a Service: myApp\\\\Default\n"
            }
        }
    },
    "provider": {
        "description": "The provider type for the venafi package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessToken": {
                "type": "string",
                "description": "Access token for Venafi TLSPDC, user should use this for authentication\n",
                "secret": true
            },
            "apiKey": {
                "type": "string",
                "description": "API key for Venafi as a Service. Example: 142231b7-cvb0-412e-886b-6aeght0bc93d\n",
                "secret": true
            },
            "clientId": {
                "type": "string",
                "description": "application that will be using the token\n"
            },
            "devMode": {
                "type": "boolean",
                "description": "When set to true, the resulting certificate will be issued by an ephemeral, no trust CA rather than enrolling using\nVenafi as a Service or Trust Protection Platform. Useful for development and testing.\n"
            },
            "p12CertFilename": {
                "type": "string",
                "description": "Filename of PKCS#12 keystore containing a client certificate, private key, and chain certificates to authenticate to\nTLSPDC\n"
            },
            "p12CertPassword": {
                "type": "string",
                "description": "Password for the PKCS#12 keystore declared in p12_cert\n",
                "secret": true
            },
            "skipRetirement": {
                "type": "boolean",
                "description": "When true, certificates will not be retired on Venafi platforms when terraform destroy is run. Default is false.\n"
            },
            "tppPassword": {
                "type": "string",
                "description": "Password for WebSDK user. Example: password\n",
                "deprecationMessage": ", please use access_token instead",
                "secret": true
            },
            "tppUsername": {
                "type": "string",
                "description": "WebSDK user for Venafi TLSPDC. Example: admin\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "trustBundle": {
                "type": "string",
                "description": "Use to specify a PEM-formatted file that contains certificates to be trust anchors for all communications with the\nVenafi Web Service. Example: trust_bundle = \"${file(\"chain.pem\")}\"\n"
            },
            "url": {
                "type": "string",
                "description": "The Venafi Platform URL. Example: https://tpp.venafi.example/vedsdk\n"
            },
            "zone": {
                "type": "string",
                "description": "DN of the Venafi TLSPDC policy folder or name of the Venafi as a Service application plus issuing template alias.\nExample for Platform: testPolicy\\\\vault Example for Venafi as a Service: myApp\\\\Default\n"
            }
        },
        "inputProperties": {
            "accessToken": {
                "type": "string",
                "description": "Access token for Venafi TLSPDC, user should use this for authentication\n",
                "secret": true
            },
            "apiKey": {
                "type": "string",
                "description": "API key for Venafi as a Service. Example: 142231b7-cvb0-412e-886b-6aeght0bc93d\n",
                "secret": true
            },
            "clientId": {
                "type": "string",
                "description": "application that will be using the token\n"
            },
            "devMode": {
                "type": "boolean",
                "description": "When set to true, the resulting certificate will be issued by an ephemeral, no trust CA rather than enrolling using\nVenafi as a Service or Trust Protection Platform. Useful for development and testing.\n"
            },
            "p12CertFilename": {
                "type": "string",
                "description": "Filename of PKCS#12 keystore containing a client certificate, private key, and chain certificates to authenticate to\nTLSPDC\n"
            },
            "p12CertPassword": {
                "type": "string",
                "description": "Password for the PKCS#12 keystore declared in p12_cert\n",
                "secret": true
            },
            "skipRetirement": {
                "type": "boolean",
                "description": "When true, certificates will not be retired on Venafi platforms when terraform destroy is run. Default is false.\n"
            },
            "tppPassword": {
                "type": "string",
                "description": "Password for WebSDK user. Example: password\n",
                "deprecationMessage": ", please use access_token instead",
                "secret": true
            },
            "tppUsername": {
                "type": "string",
                "description": "WebSDK user for Venafi TLSPDC. Example: admin\n",
                "deprecationMessage": ", please use access_token instead"
            },
            "trustBundle": {
                "type": "string",
                "description": "Use to specify a PEM-formatted file that contains certificates to be trust anchors for all communications with the\nVenafi Web Service. Example: trust_bundle = \"${file(\"chain.pem\")}\"\n"
            },
            "url": {
                "type": "string",
                "description": "The Venafi Platform URL. Example: https://tpp.venafi.example/vedsdk\n"
            },
            "zone": {
                "type": "string",
                "description": "DN of the Venafi TLSPDC policy folder or name of the Venafi as a Service application plus issuing template alias.\nExample for Platform: testPolicy\\\\vault Example for Venafi as a Service: myApp\\\\Default\n"
            }
        }
    },
    "resources": {
        "venafi:index/certificate:Certificate": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The X509 certificate in PEM format.\n",
                    "language": {
                        "csharp": {
                            "name": "CertificateDetails"
                        }
                    }
                },
                "certificateDn": {
                    "type": "string"
                },
                "chain": {
                    "type": "string",
                    "description": "The trust chain of X509 certificate authority certificates in PEM format\nconcatenated together.\n"
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name of the certificate.\n"
                },
                "csrOrigin": {
                    "type": "string",
                    "description": "Whether key-pair generation will be `local` or `service` generated. Default is `local`.\n"
                },
                "csrPem": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n"
                },
                "ecdsaCurve": {
                    "type": "string",
                    "description": "ECDSA curve to use when generating a key\n"
                },
                "expirationWindow": {
                    "type": "integer",
                    "description": "Number of hours before certificate expiry\nto request a new certificate.  Defaults to `168`.\n"
                },
                "issuerHint": {
                    "type": "string",
                    "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n"
                },
                "keyPassword": {
                    "type": "string",
                    "description": "The password used to encrypt the private key.\n",
                    "secret": true
                },
                "nickname": {
                    "type": "string",
                    "description": "Use to specify a name for the new certificate object that will be created and placed in a policy. Only valid for TPP.\n"
                },
                "pkcs12": {
                    "type": "string",
                    "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\nUseful when working with resources like\nazurerm_key_vault_certificate.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The private key in PEM format.\n",
                    "secret": true
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n"
                },
                "sanDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n"
                },
                "sanEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses to use as\nalternative subjects of the certificate.\n"
                },
                "sanIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n"
                },
                "sanUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Uniform Resource Identifiers (URIs) to use as alternative\nsubjects of the certificate.\n"
                },
                "validDays": {
                    "type": "integer",
                    "description": "Desired number of days for which the new\ncertificate will be valid.\n"
                }
            },
            "required": [
                "certificate",
                "certificateDn",
                "chain",
                "commonName",
                "csrPem",
                "pkcs12",
                "privateKeyPem"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n",
                    "willReplaceOnChanges": true
                },
                "certificateDn": {
                    "type": "string"
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "csrOrigin": {
                    "type": "string",
                    "description": "Whether key-pair generation will be `local` or `service` generated. Default is `local`.\n",
                    "willReplaceOnChanges": true
                },
                "csrPem": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "ecdsaCurve": {
                    "type": "string",
                    "description": "ECDSA curve to use when generating a key\n",
                    "willReplaceOnChanges": true
                },
                "expirationWindow": {
                    "type": "integer",
                    "description": "Number of hours before certificate expiry\nto request a new certificate.  Defaults to `168`.\n"
                },
                "issuerHint": {
                    "type": "string",
                    "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n",
                    "willReplaceOnChanges": true
                },
                "keyPassword": {
                    "type": "string",
                    "description": "The password used to encrypt the private key.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "nickname": {
                    "type": "string",
                    "description": "Use to specify a name for the new certificate object that will be created and placed in a policy. Only valid for TPP.\n",
                    "willReplaceOnChanges": true
                },
                "pkcs12": {
                    "type": "string",
                    "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\nUseful when working with resources like\nazurerm_key_vault_certificate.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The private key in PEM format.\n",
                    "secret": true
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n",
                    "willReplaceOnChanges": true
                },
                "sanDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "sanEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses to use as\nalternative subjects of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "sanIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "sanUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Uniform Resource Identifiers (URIs) to use as alternative\nsubjects of the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "validDays": {
                    "type": "integer",
                    "description": "Desired number of days for which the new\ncertificate will be valid.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "commonName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "Key encryption algorithm, either `RSA` or `ECDSA`.\nDefaults to `RSA`.\n",
                        "willReplaceOnChanges": true
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The X509 certificate in PEM format.\n",
                        "language": {
                            "csharp": {
                                "name": "CertificateDetails"
                            }
                        }
                    },
                    "certificateDn": {
                        "type": "string"
                    },
                    "chain": {
                        "type": "string",
                        "description": "The trust chain of X509 certificate authority certificates in PEM format\nconcatenated together.\n"
                    },
                    "commonName": {
                        "type": "string",
                        "description": "The common name of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "csrOrigin": {
                        "type": "string",
                        "description": "Whether key-pair generation will be `local` or `service` generated. Default is `local`.\n",
                        "willReplaceOnChanges": true
                    },
                    "csrPem": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Collection of Custom Field name-value pairs to\nassign to the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "ecdsaCurve": {
                        "type": "string",
                        "description": "ECDSA curve to use when generating a key\n",
                        "willReplaceOnChanges": true
                    },
                    "expirationWindow": {
                        "type": "integer",
                        "description": "Number of hours before certificate expiry\nto request a new certificate.  Defaults to `168`.\n"
                    },
                    "issuerHint": {
                        "type": "string",
                        "description": "Used with valid_days to indicate the target\nissuer when using Trust Protection Platform.  Relevant values are: \"DigiCert\",\n\"Entrust\", and \"Microsoft\".\n",
                        "willReplaceOnChanges": true
                    },
                    "keyPassword": {
                        "type": "string",
                        "description": "The password used to encrypt the private key.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "nickname": {
                        "type": "string",
                        "description": "Use to specify a name for the new certificate object that will be created and placed in a policy. Only valid for TPP.\n",
                        "willReplaceOnChanges": true
                    },
                    "pkcs12": {
                        "type": "string",
                        "description": "A base64-encoded PKCS#12 keystore secured by the `key_password`.\nUseful when working with resources like\nazurerm_key_vault_certificate.\n"
                    },
                    "privateKeyPem": {
                        "type": "string",
                        "description": "The private key in PEM format.\n",
                        "secret": true
                    },
                    "rsaBits": {
                        "type": "integer",
                        "description": "Number of bits to use when generating an RSA key.\nApplies when `algorithm=RSA`.  Defaults to `2048`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sanDns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of DNS names to use as alternative\nsubjects of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "sanEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses to use as\nalternative subjects of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "sanIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IP addresses to use as alternative\nsubjects of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "sanUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Uniform Resource Identifiers (URIs) to use as alternative\nsubjects of the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "validDays": {
                        "type": "integer",
                        "description": "Desired number of days for which the new\ncertificate will be valid.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "venafi:index/policy:Policy": {
            "description": "Provides access to read and write certificate policy in Venafi. This can be used\nto define a new policy (folder in *Trust Protection Platform*; application\nand/or issuing template in *Venafi as a Service*).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as venafi from \"@pulumi/venafi\";\n\nconst internalPolicy = new venafi.Policy(\"internalPolicy\", {\n    zone: \"My Business App\\\\Enterprise Trusted Certs\",\n    policySpecification: fs.readFileSync(\"/path-to/internal-policy.json\", \"utf8\"),\n});\n```\n```python\nimport pulumi\nimport pulumi_venafi as venafi\n\ninternal_policy = venafi.Policy(\"internalPolicy\",\n    zone=\"My Business App\\\\Enterprise Trusted Certs\",\n    policy_specification=(lambda path: open(path).read())(\"/path-to/internal-policy.json\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Venafi = Pulumi.Venafi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var internalPolicy = new Venafi.Policy(\"internalPolicy\", new()\n    {\n        Zone = \"My Business App\\\\Enterprise Trusted Certs\",\n        PolicySpecification = File.ReadAllText(\"/path-to/internal-policy.json\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-venafi/sdk/go/venafi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := venafi.NewPolicy(ctx, \"internalPolicy\", \u0026venafi.PolicyArgs{\n\t\t\tZone:                pulumi.String(\"My Business App\\\\Enterprise Trusted Certs\"),\n\t\t\tPolicySpecification: readFileOrPanic(\"/path-to/internal-policy.json\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.venafi.Policy;\nimport com.pulumi.venafi.PolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var internalPolicy = new Policy(\"internalPolicy\", PolicyArgs.builder()        \n            .zone(\"My Business App\\\\Enterprise Trusted Certs\")\n            .policySpecification(Files.readString(Paths.get(\"/path-to/internal-policy.json\")))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  internalPolicy:\n    type: venafi:Policy\n    properties:\n      zone: My Business App\\Enterprise Trusted Certs\n      policySpecification:\n        fn::readFile: /path-to/internal-policy.json\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThe `venafi_policy` resource supports the Terraform import\n\nmethod.  When used, the `zone` and `policy_specification` resource arguments\n\nare not required since the zone is a required parameter of the import method\n\nand the policy specification is populated from the existing infrastructure.\n\nPolicy that is successfully imported is also output to a file named after the\n\nzone that was specified.\n\nhcl\n\nresource \"venafi_policy\" \"existing_policy\" {}\n\n```sh\n$ pulumi import venafi:index/policy:Policy existing_policy\" \"My Business App\\\\Enterprise Trusted Certs\"\n```\n\n",
            "properties": {
                "policySpecification": {
                    "type": "string",
                    "description": "The JSON-formatted certificate policy\nspecification as documented [here](https://github.com/Venafi/vcert/blob/master/README-POLICY-SPEC.md).\nTypically read from a file using the `file` function.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The *Trust Protection Plaform* policy folder or\n*Venafi as a Service* application and issuing template.\n"
                }
            },
            "inputProperties": {
                "policySpecification": {
                    "type": "string",
                    "description": "The JSON-formatted certificate policy\nspecification as documented [here](https://github.com/Venafi/vcert/blob/master/README-POLICY-SPEC.md).\nTypically read from a file using the `file` function.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "The *Trust Protection Plaform* policy folder or\n*Venafi as a Service* application and issuing template.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "policySpecification": {
                        "type": "string",
                        "description": "The JSON-formatted certificate policy\nspecification as documented [here](https://github.com/Venafi/vcert/blob/master/README-POLICY-SPEC.md).\nTypically read from a file using the `file` function.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "The *Trust Protection Plaform* policy folder or\n*Venafi as a Service* application and issuing template.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "venafi:index/sshCertificate:SshCertificate": {
            "description": "Provides access to request and retrieve SSH certificates from *Venafi Trust Protection Platform*.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as venafi from \"@pulumi/venafi\";\n\nconst sshCert = new venafi.SshCertificate(\"sshCert\", {\n    keyId: \"my-first-ssh-certificate\",\n    keyPassphrase: \"passw0rd\",\n    keySize: 3072,\n    principals: [\"seamus\"],\n    publicKeyMethod: \"local\",\n    template: \"Sample SSH CA\",\n    validHours: 24,\n});\n```\n```python\nimport pulumi\nimport pulumi_venafi as venafi\n\nssh_cert = venafi.SshCertificate(\"sshCert\",\n    key_id=\"my-first-ssh-certificate\",\n    key_passphrase=\"passw0rd\",\n    key_size=3072,\n    principals=[\"seamus\"],\n    public_key_method=\"local\",\n    template=\"Sample SSH CA\",\n    valid_hours=24)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Venafi = Pulumi.Venafi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sshCert = new Venafi.SshCertificate(\"sshCert\", new()\n    {\n        KeyId = \"my-first-ssh-certificate\",\n        KeyPassphrase = \"passw0rd\",\n        KeySize = 3072,\n        Principals = new[]\n        {\n            \"seamus\",\n        },\n        PublicKeyMethod = \"local\",\n        Template = \"Sample SSH CA\",\n        ValidHours = 24,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-venafi/sdk/go/venafi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := venafi.NewSshCertificate(ctx, \"sshCert\", \u0026venafi.SshCertificateArgs{\n\t\t\tKeyId:         pulumi.String(\"my-first-ssh-certificate\"),\n\t\t\tKeyPassphrase: pulumi.String(\"passw0rd\"),\n\t\t\tKeySize:       pulumi.Int(3072),\n\t\t\tPrincipals: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"seamus\"),\n\t\t\t},\n\t\t\tPublicKeyMethod: pulumi.String(\"local\"),\n\t\t\tTemplate:        pulumi.String(\"Sample SSH CA\"),\n\t\t\tValidHours:      pulumi.Int(24),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.venafi.SshCertificate;\nimport com.pulumi.venafi.SshCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sshCert = new SshCertificate(\"sshCert\", SshCertificateArgs.builder()        \n            .keyId(\"my-first-ssh-certificate\")\n            .keyPassphrase(\"passw0rd\")\n            .keySize(3072)\n            .principals(\"seamus\")\n            .publicKeyMethod(\"local\")\n            .template(\"Sample SSH CA\")\n            .validHours(24)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sshCert:\n    type: venafi:SshCertificate\n    properties:\n      keyId: my-first-ssh-certificate\n      keyPassphrase: passw0rd\n      keySize: 3072\n      principals:\n        - seamus\n      publicKeyMethod: local\n      template: Sample SSH CA\n      validHours: 24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The issued SSH certificate.\n"
                },
                "certificateType": {
                    "type": "string",
                    "description": "Indicates whether the SSH certificate is for client or server authentication.\n"
                },
                "destinationAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more valid IP or CIDR destination hosts where the certificate will authenticate.\n"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of key-value pairs that contain certificate extensions from the CA template for client certificates. Allowed values (case-sensitive): *permit-X11-forwarding, permit-agent-forwarding, permit-port-forwarding, permit-pty, permit-user-rc*\n"
                },
                "folder": {
                    "type": "string",
                    "description": "The DN of the policy folder where the SSH certificate object will be created.\n"
                },
                "forceCommand": {
                    "type": "string",
                    "description": "A command to run after successful login.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "The identifier of the requested SSH certificate.\n"
                },
                "keyPassphrase": {
                    "type": "string",
                    "description": "Passphrase for encrypting the private key.\n",
                    "secret": true
                },
                "keySize": {
                    "type": "integer",
                    "description": "Number of bits to use when creating a key pair. (e.g. 3072)\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "The friendly name of the SSH certificate object. When not specified the `key_id` is used for the friendly name. If the object already exists the old certificate is archived and the CA issues a new certificate.\n"
                },
                "principal": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "[DEPRECATED] - (Optional, set of strings) Use \"principals\" instead. A list of user names for whom the requested certificate will be valid.\n",
                    "deprecationMessage": "This will be removed in the future. Use \"principals\" instead"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user names for whom the requested certificate will be valid.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for the SSH certificate if generated by Venafi.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The OpenSSH formatted public key that will be used to generate the SSH certificate.\n"
                },
                "publicKeyFingerprint": {
                    "type": "string",
                    "description": "The SHA256 fingerprint of the SSH certificate's public key.\n"
                },
                "publicKeyMethod": {
                    "type": "string",
                    "description": "Specifies whether the public key will be \"local\" (default), \"file\" or \"service\" generated.\n"
                },
                "serial": {
                    "type": "string",
                    "description": "The serial number of the SSH certificate.\n"
                },
                "signingCa": {
                    "type": "string",
                    "description": "The SHA256 fingerprint of the CA that signed the SSH certificate.\n"
                },
                "sourceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more valid IP or CIDR addresses that can use the SSH certificate.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The SSH certificate issuing template.\n"
                },
                "validFrom": {
                    "type": "string",
                    "description": "The date the SSH certificate was issued.\n"
                },
                "validHours": {
                    "type": "integer",
                    "description": "Desired number of hours for which the certificate will be valid.\n"
                },
                "validTo": {
                    "type": "string",
                    "description": "The date the SSH certificate will expire.\n"
                },
                "windows": {
                    "type": "boolean",
                    "description": "Specifies whether the private key will use Windows/DOS style line breaks.\n"
                }
            },
            "required": [
                "certificate",
                "certificateType",
                "keyId",
                "privateKey",
                "publicKeyFingerprint",
                "serial",
                "signingCa",
                "template",
                "validFrom",
                "validTo"
            ],
            "inputProperties": {
                "destinationAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more valid IP or CIDR destination hosts where the certificate will authenticate.\n",
                    "willReplaceOnChanges": true
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of key-value pairs that contain certificate extensions from the CA template for client certificates. Allowed values (case-sensitive): *permit-X11-forwarding, permit-agent-forwarding, permit-port-forwarding, permit-pty, permit-user-rc*\n",
                    "willReplaceOnChanges": true
                },
                "folder": {
                    "type": "string",
                    "description": "The DN of the policy folder where the SSH certificate object will be created.\n",
                    "willReplaceOnChanges": true
                },
                "forceCommand": {
                    "type": "string",
                    "description": "A command to run after successful login.\n",
                    "willReplaceOnChanges": true
                },
                "keyId": {
                    "type": "string",
                    "description": "The identifier of the requested SSH certificate.\n",
                    "willReplaceOnChanges": true
                },
                "keyPassphrase": {
                    "type": "string",
                    "description": "Passphrase for encrypting the private key.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "keySize": {
                    "type": "integer",
                    "description": "Number of bits to use when creating a key pair. (e.g. 3072)\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "The friendly name of the SSH certificate object. When not specified the `key_id` is used for the friendly name. If the object already exists the old certificate is archived and the CA issues a new certificate.\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "[DEPRECATED] - (Optional, set of strings) Use \"principals\" instead. A list of user names for whom the requested certificate will be valid.\n",
                    "deprecationMessage": "This will be removed in the future. Use \"principals\" instead",
                    "willReplaceOnChanges": true
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user names for whom the requested certificate will be valid.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The OpenSSH formatted public key that will be used to generate the SSH certificate.\n",
                    "willReplaceOnChanges": true
                },
                "publicKeyMethod": {
                    "type": "string",
                    "description": "Specifies whether the public key will be \"local\" (default), \"file\" or \"service\" generated.\n",
                    "willReplaceOnChanges": true
                },
                "sourceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more valid IP or CIDR addresses that can use the SSH certificate.\n",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "type": "string",
                    "description": "The SSH certificate issuing template.\n",
                    "willReplaceOnChanges": true
                },
                "validHours": {
                    "type": "integer",
                    "description": "Desired number of hours for which the certificate will be valid.\n",
                    "willReplaceOnChanges": true
                },
                "windows": {
                    "type": "boolean",
                    "description": "Specifies whether the private key will use Windows/DOS style line breaks.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "keyId",
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshCertificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "The issued SSH certificate.\n"
                    },
                    "certificateType": {
                        "type": "string",
                        "description": "Indicates whether the SSH certificate is for client or server authentication.\n"
                    },
                    "destinationAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of one or more valid IP or CIDR destination hosts where the certificate will authenticate.\n",
                        "willReplaceOnChanges": true
                    },
                    "extensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of key-value pairs that contain certificate extensions from the CA template for client certificates. Allowed values (case-sensitive): *permit-X11-forwarding, permit-agent-forwarding, permit-port-forwarding, permit-pty, permit-user-rc*\n",
                        "willReplaceOnChanges": true
                    },
                    "folder": {
                        "type": "string",
                        "description": "The DN of the policy folder where the SSH certificate object will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "forceCommand": {
                        "type": "string",
                        "description": "A command to run after successful login.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The identifier of the requested SSH certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyPassphrase": {
                        "type": "string",
                        "description": "Passphrase for encrypting the private key.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "keySize": {
                        "type": "integer",
                        "description": "Number of bits to use when creating a key pair. (e.g. 3072)\n",
                        "willReplaceOnChanges": true
                    },
                    "objectName": {
                        "type": "string",
                        "description": "The friendly name of the SSH certificate object. When not specified the `key_id` is used for the friendly name. If the object already exists the old certificate is archived and the CA issues a new certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "principal": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "[DEPRECATED] - (Optional, set of strings) Use \"principals\" instead. A list of user names for whom the requested certificate will be valid.\n",
                        "deprecationMessage": "This will be removed in the future. Use \"principals\" instead",
                        "willReplaceOnChanges": true
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user names for whom the requested certificate will be valid.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key for the SSH certificate if generated by Venafi.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The OpenSSH formatted public key that will be used to generate the SSH certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKeyFingerprint": {
                        "type": "string",
                        "description": "The SHA256 fingerprint of the SSH certificate's public key.\n"
                    },
                    "publicKeyMethod": {
                        "type": "string",
                        "description": "Specifies whether the public key will be \"local\" (default), \"file\" or \"service\" generated.\n",
                        "willReplaceOnChanges": true
                    },
                    "serial": {
                        "type": "string",
                        "description": "The serial number of the SSH certificate.\n"
                    },
                    "signingCa": {
                        "type": "string",
                        "description": "The SHA256 fingerprint of the CA that signed the SSH certificate.\n"
                    },
                    "sourceAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of one or more valid IP or CIDR addresses that can use the SSH certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "template": {
                        "type": "string",
                        "description": "The SSH certificate issuing template.\n",
                        "willReplaceOnChanges": true
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "The date the SSH certificate was issued.\n"
                    },
                    "validHours": {
                        "type": "integer",
                        "description": "Desired number of hours for which the certificate will be valid.\n",
                        "willReplaceOnChanges": true
                    },
                    "validTo": {
                        "type": "string",
                        "description": "The date the SSH certificate will expire.\n"
                    },
                    "windows": {
                        "type": "boolean",
                        "description": "Specifies whether the private key will use Windows/DOS style line breaks.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "venafi:index/sshConfig:SshConfig": {
            "description": "Provides access to retrieve configuration from SSH certificate issuance template from *Venafi Trust Protection Platform*.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as venafi from \"@pulumi/venafi\";\n\nconst cit = new venafi.SshConfig(\"cit\", {template: \"devops-terraform-cit\"});\n```\n```python\nimport pulumi\nimport pulumi_venafi as venafi\n\ncit = venafi.SshConfig(\"cit\", template=\"devops-terraform-cit\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Venafi = Pulumi.Venafi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cit = new Venafi.SshConfig(\"cit\", new()\n    {\n        Template = \"devops-terraform-cit\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-venafi/sdk/go/venafi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := venafi.NewSshConfig(ctx, \"cit\", \u0026venafi.SshConfigArgs{\n\t\t\tTemplate: pulumi.String(\"devops-terraform-cit\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.venafi.SshConfig;\nimport com.pulumi.venafi.SshConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cit = new SshConfig(\"cit\", SshConfigArgs.builder()        \n            .template(\"devops-terraform-cit\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cit:\n    type: venafi:SshConfig\n    properties:\n      template: devops-terraform-cit\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "caPublicKey": {
                    "type": "string",
                    "description": "(Optional, string) The template's CA public key.\n"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional, set of strings) A list of user names exported from the template.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The SSH certificate issuing template.\n"
                }
            },
            "required": [
                "caPublicKey",
                "principals",
                "template"
            ],
            "inputProperties": {
                "template": {
                    "type": "string",
                    "description": "The SSH certificate issuing template.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshConfig resources.\n",
                "properties": {
                    "caPublicKey": {
                        "type": "string",
                        "description": "(Optional, string) The template's CA public key.\n"
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional, set of strings) A list of user names exported from the template.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The SSH certificate issuing template.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    }
}